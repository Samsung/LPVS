openapi: 3.0.0
info:
  title: LPVS API
  version: v2-20231122
  description: >-

    License Pre-Validation Service (LPVS) helps to mitigate license-related
    risks for OpenSource code. The tool analyzes the project, identifies its
    components and their respective licenses at every commit.
  contact:
    email: o.kopysov@samsung.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
paths:
  /webhooks:
    post:
      tags:
        - Webhooks
      summary: GitHub Webhooks - POST
      parameters:
        - in: header
          name: X-Hub-Signature-256
          schema:
            type: string
          required: true
          example: >-
            sha256=ca1a168a680cc02e3bb273e5083c7207c69210c1daaf815c08cd57cd65a1ee04
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '200':
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponseOK'
        '403':
          description: 403 Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponseForbidden'
  /api/v1/web/user/info:
    get:
      summary: Retrieves personal information settings for the authenticated user.
      parameters:
        - name: authentication
          in: query
          required: true
          description: The authentication object.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                LPVSMember:
                  id: 1
                  name: John Doe
                  email: john.doe@example.com
                  provider: GitHub
                  nickname: johndoe
                  organization: Acme Corp
  /api/v1/web/user/login:
    get:
      summary: Retrieves login details for the authenticated user.
      parameters:
        - name: authentication
          in: query
          required: true
          description: The authentication object.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                LPVSLoginMember:
                  isLoggedIn: true
                  member:
                    id: 1
                    name: John Doe
                    email: john.doe@example.com
                    provider: GitHub
                    nickname: johndoe
                    organization: Acme Corp
  /api/v1/web/user/update:
    post:
      summary: Updates user settings based on the provided map.
      parameters:
        - name: map
          in: query
          required: true
          description: Map containing user settings.
        - name: authentication
          in: query
          required: true
          description: The authentication object.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                LPVSMember:
                  id: 1
                  name: John Doe
                  email: john.doe@example.com
                  provider: GitHub
                  nickname: updatedNickname
                  organization: updatedOrganization
  '/api/v1/web/history/{type}/{name}':
    get:
      summary: Retrieves the history page entity based on the specified type and name.
      parameters:
        - name: type
          in: path
          required: true
          description: 'The type of history (e.g., user, organization).'
        - name: name
          in: path
          required: true
          description: The name of the user or organization.
        - name: pageable
          in: query
          description: The pageable object for pagination.
        - name: authentication
          in: query
          required: true
          description: The authentication object.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                HistoryEntity:
                  lpvsHistories:
                    - scanDate: '2023-11-22'
                      repositoryName: ExampleRepo
                      pullRequestId: 1
                      url: 'https://github.com/example/repo/pull/1'
                      status: Open
                      sender: john_doe
                      pullNumber: '1'
                      hasIssue: false
                    - scanDate: '2023-11-23'
                      repositoryName: AnotherRepo
                      pullRequestId: 2
                      url: 'https://github.com/another/repo/pull/2'
                      status: Closed
                      sender: jane_doe
                      pullNumber: '2'
                      hasIssue: true
                  count: 2
  '/api/v1/web/result/{prId}':
    get:
      summary: Retrieves the LPVSResult for a specific pull request ID.
      parameters:
        - name: prId
          in: path
          required: true
          description: The pull request ID.
        - name: pageable
          in: query
          description: The pageable object for pagination.
        - name: authentication
          in: query
          required: true
          description: The authentication object.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                LPVSResult:
                  lpvsResultFileList:
                    - id: 1
                      path: path/to/file1
                      componentFileUrl: 'https://github.com/example/repo/blob/main/path/to/file1'
                      matchLine: '5'
                      matchValue: Some matching text
                      status: Valid
                      licenseSpdx: MIT
                    - id: 2
                      path: path/to/file2
                      componentFileUrl: 'https://github.com/another/repo/blob/main/path/to/file2'
                      matchLine: '10'
                      matchValue: Another matching text
                      status: Invalid
                      licenseSpdx: GPL-3.0
                  lpvsResultInfo:
                    id: 1
                    date: '2023-01-01'
                    repositoryName: Sample Repository
                    status: Open
                    detectedLicenses:
                      - MIT
                      - Apache-2.0
                  count: 2
                  licenseCountMap:
                    MIT: 3
                    Apache-2.0: 2
                  pullNumber: '18'
                  hasIssue: true
  '/api/v1/web/dashboard/{type}/{name}':
    get:
      summary: Retrieves the Dashboard entity based on the specified type and name.
      parameters:
        - name: type
          in: path
          required: true
          description: 'The type of the dashboard (e.g., user, organization).'
        - name: name
          in: path
          required: true
          description: The name of the user or organization.
        - name: authentication
          in: query
          required: true
          description: The authentication object.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                Dashboard:
                  name: Sample Dashboard
                  licenseCountMap:
                    MIT: 10
                    Apache-2.0: 5
                  totalDetectionCount: 100
                  highSimilarityCount: 20
                  totalIssueCount: 5
                  totalParticipantsCount: 50
                  totalRepositoryCount: 10
                  dashboardElementsByDates:
                    - date: '2023-01-01'
                      participantCount: 30
                      pullRequestCount: 15
                      riskGradeMap:
                        LOW: 5
                        MEDIUM: 8
                        HIGH: 2
components:
  schemas:
    WebhookRequest:
      type: object
      properties:
        action:
          type: string
          example: opened
        repository:
          type: object
          properties:
            name:
              type: string
              example: LPVS
            full_name:
              type: string
              example: Samsung/LPVS
            html_url:
              type: string
              format: uri
              example: 'https://github.com/Samsung/LPVS'
        pull_request:
          type: object
          properties:
            html_url:
              type: string
              format: uri
              example: 'https://github.com/Samsung/LPVS/pull/18'
            head:
              type: object
              properties:
                repo:
                  type: object
                  properties:
                    fork:
                      type: string
                      example: 'true'
                    html_url:
                      type: string
                      format: uri
                      example: 'https://github.com/Samsung/LPVS/tree/utests'
                sha:
                  type: string
                  example: edde69ecb8e8a88dde09fa9789e2c9cab7cf7cf9
                ref:
                  type: string
                  example: 'Samsung:utests'
            url:
              type: string
              format: uri
              example: 'https://api.github.com/repos/Samsung/LPVS/pulls/18'
    WebhookResponseOK:
      type: object
      properties:
        message:
          type: string
          format: uuid
          example: Success
    WebhookResponseForbidden:
      type: object
      properties:
        message:
          type: string
          format: uuid
          example: Error
