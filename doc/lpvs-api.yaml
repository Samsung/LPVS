openapi: 3.0.0
info:
  title: LPVS API
  version: v2-20231228
  description: >-
    License Pre-Validation Service (LPVS) is a tool designed to proactively manage
    license-related risks in Open Source code. It conducts in-depth analysis of your
    project, meticulously identifying components and their associated licenses with
    every commit. LPVS empowers your development workflow by ensuring compliance
    and providing insights into licensing aspects, enhancing the overall health and
    robustness of your software projects.
  contact:
    email: o.kopysov@samsung.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
paths:
  /webhooks:
    post:
      tags:
        - GitHub Webhooks API
      summary: Start Scan
      description: Endpoint for handling GitHub webhook events and processing the payload.
      parameters:
        - in: header
          name: X-Hub-Signature-256
          schema:
            type: string
          required: true
          example: >-
            sha256=ca1a168a680cc02e3bb273e5083c7207c69210c1daaf815c08cd57cd65a1ee04
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '200':
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponseOK'
        '403':
          description: 403 Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponseForbidden'

  /scan/{gitHubDomain}/{gitHubOrg}/{gitHubRepo}/{prNumber}:
    post:
      tags:
        - GitHub Pull Request Single Scan API
      summary: GitHub Pull Request Single Scan
      description: Endpoint for performing a single scan operation based on GitHub organization, repository, and pull request number.
      parameters:
        - in: path
          name: gitHubDomain
          required: true
          schema:
            type: string
          description: GitHub domain name
          example: 'github.com'
        - in: path
          name: gitHubOrg
          required: true
          schema:
            type: string
          description: GitHub organization name
          example: 'Samsung'
        - in: path
          name: gitHubRepo
          required: true
          schema:
            type: string
          description: GitHub repository name
          example: 'LPVS'
        - in: path
          name: prNumber
          required: true
          schema:
            type: integer
          description: Pull request number
          example: 100
      responses:
        '200':
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponseOK'
        '403':
          description: 403 Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponseForbidden'

  /api/v1/web/user/login:
    get:
      tags:
        - Web API
      summary: User Login
      description: Retrieves login details for the authenticated user.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LPVSLoginMember'
        '401':
          description: Unauthorized, authentication failure
        '500':
          description: Internal server error

  /api/v1/web/user/info:
    get:
      tags:
        - Web API
      summary: Retrieve User Information
      description: Retrieves personal information settings for the authenticated user.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LPVSMember'
        '401':
          description: Unauthorized, authentication failure
        '500':
          description: Internal server error

  /api/v1/web/user/update:
    post:
      tags:
        - Web API
      summary: Update User Settings
      description: Updates user settings based on the provided data in the request body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LPVSMember'
        '401':
          description: Unauthorized, authentication failure
        '500':
          description: Internal server error

  '/api/v1/web/history/{type}/{name}':
    get:
      tags:
        - Web API
      summary: Retrieve History Page Entity
      description: Retrieves the history page entity based on the specified type and name.
      parameters:
        - name: type
          in: path
          schema:
            type: string
          required: true
          description: The type of history (e.g., "own", "org", "send").
        - name: name
          in: path
          schema:
            type: string
          required: true
          description: The name of the user or organization.
        - name: pageable
          in: query
          schema:
            $ref: '#/components/schemas/Pageable'
          required: false
          description: The pageable object for pagination.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryEntity'
        '401':
          description: Unauthorized, authentication failure
        '500':
          description: Internal server error

  '/api/v1/web/result/{prId}':
    get:
      tags:
        - Web API
      summary: Retrieve LPVSResult for Pull Request
      description: Retrieves the LPVSResult for a specific pull request ID.
      parameters:
        - name: prId
          in: path
          schema:
            type: number
          required: true
          description: The pull request ID.
        - name: pageable
          in: query
          schema:
            $ref: '#/components/schemas/Pageable'
          required: false
          description: The pageable object for pagination.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LPVSResult'
        '401':
          description: Unauthorized, authentication failure
        '500':
          description: Internal server error

  '/api/v1/web/dashboard/{type}/{name}':
    get:
      tags:
        - Web API
      summary: Retrieve Dashboard Entity
      description: Retrieves the Dashboard entity based on the specified type and name.
      parameters:
        - name: type
          in: path
          schema:
            type: string
          required: true
          description: 'The type of the dashboard (e.g., user, organization).'
        - name: name
          in: path
          schema:
            type: string
          required: true
          description: The name of the user or organization.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '401':
          description: Unauthorized, authentication failure
        '500':
          description: Internal server error

components:
  schemas:
    WebhookRequest:
      type: object
      properties:
        action:
          type: string
          example: opened
        repository:
          type: object
          properties:
            name:
              type: string
              example: LPVS
            full_name:
              type: string
              example: Samsung/LPVS
            html_url:
              type: string
              format: uri
              example: 'https://github.com/Samsung/LPVS'
        pull_request:
          type: object
          properties:
            html_url:
              type: string
              format: uri
              example: 'https://github.com/Samsung/LPVS/pull/18'
            head:
              type: object
              properties:
                repo:
                  type: object
                  properties:
                    fork:
                      type: string
                      example: 'true'
                    html_url:
                      type: string
                      format: uri
                      example: 'https://github.com/Samsung/LPVS/tree/utests'
                sha:
                  type: string
                  example: edde69ecb8e8a88dde09fa9789e2c9cab7cf7cf9
                ref:
                  type: string
                  example: 'Samsung:utests'
            url:
              type: string
              format: uri
              example: 'https://api.github.com/repos/Samsung/LPVS/pulls/18'

    WebhookResponseOK:
      type: object
      properties:
        message:
          type: string
          format: uuid
          example: Success

    WebhookResponseForbidden:
      type: object
      properties:
        message:
          type: string
          format: uuid
          example: Error

    UserUpdateRequest:
      type: object
      properties:
        nickname:
          type: string
          description: User's new nickname
        organization:
          type: string
          description: User's new organization

    LPVSMember:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the member
          example: 1
        name:
          type: string
          description: The name of the member
          example: John Doe
        email:
          type: string
          format: email
          description: The email address of the member
          example: john.doe@example.com
        provider:
          type: string
          description: The provider associated with the member
          example: GitHub
        nickname:
          type: string
          description: The nickname of the member
          example: johndoe
        organization:
          type: string
          description: The organization associated with the member
          example: Acme Corp

    LPVSLoginMember:
      type: object
      properties:
        isLoggedIn:
          type: boolean
          description: Indicates whether the member is logged in or not
          example: true
        member:
          $ref: '#/components/schemas/LPVSMember'

    LPVSHistory:
      type: object
      properties:
        scanDate:
          type: string
          description: The date of the scan
          example: "2023-01-01"
        repositoryName:
          type: string
          description: The name of the repository
          example: "example-repo"
        pullRequestId:
          type: integer
          description: The ID of the pull request
          example: 123
        url:
          type: string
          format: uri
          description: The URL associated with the history entry
          example: "https://example.com/pull/123"
        status:
          type: string
          description: The status of the history entry
          example: "pending"
        sender:
          type: string
          description: The sender of the pull request
          example: "JohnDoe"
        pullNumber:
          type: string
          description: The pull request number
          example: "pull/123"
        hasIssue:
          type: boolean
          description: Indicates whether the history entry has an issue or not
          example: true

    HistoryEntity:
      type: object
      properties:
        lpvsHistories:
          type: array
          items:
            $ref: '#/components/schemas/LPVSHistory'
          description: List of LPVSHistory entries
        count:
          type: integer
          description: The count of history entries
          example: 10

    Pageable:
      type: object
      properties:
        page:
          type: integer
          description: Page number (0-based)
          example: 1
        size:
          type: integer
          description: Number of items per page
          example: 5
        sort:
          type: string
          description: Sorting field
          example: date
        direction:
          type: string
          description: Sorting direction (ASC or DESC)
          example: DESC

    LPVSResult:
      type: object
      properties:
        lpvsResultFileList:
          type: array
          items:
            $ref: '#/components/schemas/LPVSResultFile'
          description: List of LPVSResultFile entries
        lpvsResultInfo:
          $ref: '#/components/schemas/LPVSResultInfo'
        count:
          type: integer
          description: The count of results
          example: 10
        licenseCountMap:
          type: object
          additionalProperties:
            type: integer
          description: Map of license counts
          example:
            MIT: 3
            Apache-2.0: 2
        pullNumber:
          type: string
          description: The pull request number
          example: "pull/123"
        hasIssue:
          type: boolean
          description: Indicates whether the result has an issue or not
          example: true

    LPVSResultFile:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the result file
          example: 1
        path:
          type: string
          description: The path of the result file
          example: "src/main/java/Example.java"
        componentFileUrl:
          type: string
          format: uri
          description: The URL of the component file
          example: "https://example.com/file/1"
        matchLine:
          type: string
          description: The lines containing the match in the result file
          example: "42"
        matchValue:
          type: string
          description: The value of the match in the result file
          example: "Snippet"
        status:
          type: string
          description: The status of the result file
          example: "license.PERMITTED"
        licenseSpdx:
          type: string
          description: The SPDX identifier of the license
          example: "MIT"

    LPVSResultInfo:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the result info
          example: 1
        scanDate:
          type: string
          format: date-time
          description: The date of the scan
          example: "2023-01-01T12:00:00Z"
        repositoryName:
          type: string
          description: The name of the repository
          example: "example-repo"
        status:
          type: string
          description: The status of the result info
          example: "pending"
        detectedLicenses:
          type: array
          items:
            type: string
          description: List of detected licenses

    Dashboard:
      type: object
      properties:
        name:
          type: string
          description: The name of the user or organization
          example: "john-doe"
        licenseCountMap:
          type: object
          additionalProperties:
            type: integer
          description: Map of license counts
          example:
            MIT: 3
            Apache-2.0: 2
        totalDetectionCount:
          type: integer
          description: The total number of detections
          example: 100
        highSimilarityCount:
          type: integer
          description: The count of high similarity detections
          example: 20
        totalIssueCount:
          type: integer
          description: The total number of issues
          example: 5
        totalParticipantsCount:
          type: integer
          description: The total number of participants
          example: 50
        totalRepositoryCount:
          type: integer
          description: The total number of repositories
          example: 10
        dashboardElementsByDates:
          type: array
          items:
            $ref: '#/components/schemas/DashboardElementsByDate'
          description: List of DashboardElementsByDate entries

    DashboardElementsByDate:
      type: object
      properties:
        date:
          type: string
          format: date
          description: The date for the dashboard element
          example: "2023-01-01"
        participantCount:
          type: integer
          description: The count of participants on the given date
          example: 5
        pullRequestCount:
          type: integer
          description: The count of pull requests on the given date
          example: 10
        riskGradeMap:
          type: object
          additionalProperties:
            type: integer
          description: Map of risk grades counts
          example:
            SERIOUS: 2
            HIGH: 3
            MIDDLE: 5
            LOW: 8
            NONE: 2
