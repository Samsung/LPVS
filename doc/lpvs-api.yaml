openapi: 3.0.0
info:
  title: LPVS API
  version: v2-20250905
  description: >-
    License Pre-Validation Service (LPVS) is a tool designed to proactively manage
    license-related risks in Open Source code. It conducts in-depth analysis of your
    project, meticulously identifying components and their associated licenses with
    every commit. LPVS empowers your development workflow by ensuring compliance
    and providing insights into licensing aspects, enhancing the overall health and
    robustness of your software projects.
  contact:
    email: o.kopysov@samsung.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
paths:
  /webhooks:
    post:
      tags:
        - GitHub Webhooks API
      summary: Start Scan
      description: Endpoint for handling GitHub webhook events and processing the payload.
      parameters:
        - in: header
          name: X-Hub-Signature-256
          schema:
            type: string
          required: true
          example: >-
            sha256=ca1a168a680cc02e3bb273e5083c7207c69210c1daaf815c08cd57cd65a1ee04
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '200':
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponseOK'
        '403':
          description: 403 Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponseForbidden'

  /:
    post:
      tags:
        - GitHub Webhooks API
      summary: Forward to Start Scan
      description: Forwards the request to the `/webhooks` endpoint.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '200':
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponseOK'
        '403':
          description: 403 Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponseForbidden'

  /scan/{gitHubOrg}/{gitHubRepo}/{prNumber}:
    post:
      tags:
        - GitHub Pull Request Single Scan API
      summary: GitHub Pull Request Single Scan
      description: Endpoint for performing a single scan operation based on GitHub organization, repository, and pull request number.
      parameters:
        - in: path
          name: gitHubOrg
          required: true
          schema:
            type: string
          description: GitHub organization name
          example: 'Samsung'
        - in: path
          name: gitHubRepo
          required: true
          schema:
            type: string
          description: GitHub repository name
          example: 'LPVS'
        - in: path
          name: prNumber
          required: true
          schema:
            type: integer
          description: Pull request number
          example: 100
      responses:
        '200':
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponseOK'
        '403':
          description: 403 Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponseForbidden'

  /health:
    get:
      tags:
        - Health Check API
      summary: Service Health Check
      description: Endpoint for checking the health of the service. Returns the current number of items in the processing queue.
      responses:
        '200':
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

components:
  schemas:
    WebhookRequest:
      type: object
      properties:
        action:
          type: string
          example: opened
        repository:
          type: object
          properties:
            name:
              type: string
              example: LPVS
            full_name:
              type: string
              example: Samsung/LPVS
            html_url:
              type: string
              format: uri
              example: 'https://github.com/Samsung/LPVS'
        pull_request:
          type: object
          properties:
            html_url:
              type: string
              format: uri
              example: 'https://github.com/Samsung/LPVS/pull/18'
            head:
              type: object
              properties:
                repo:
                  type: object
                  properties:
                    fork:
                      type: string
                      example: 'true'
                    html_url:
                      type: string
                      format: uri
                      example: 'https://github.com/Samsung/LPVS/tree/utests'
                sha:
                  type: string
                  example: edde69ecb8e8a88dde09fa9789e2c9cab7cf7cf9
                ref:
                  type: string
                  example: 'Samsung:utests'
            url:
              type: string
              format: uri
              example: 'https://api.github.com/repos/Samsung/LPVS/pulls/18'

    WebhookResponseOK:
      type: object
      properties:
        message:
          type: string
          format: uuid
          example: Success

    WebhookResponseForbidden:
      type: object
      properties:
        message:
          type: string
          format: uuid
          example: Error

    HealthResponse:
      type: object
      properties:
        queueLength:
          type: integer
          format: int64
          description: The current number of items in the processing queue.
          example: 5
