version: '3.4'

services:

  lpvs:
    build:
      context: .
    image: ghcr.io/samsung/lpvs:latest
    restart: always
    ports:
      - "7896:7896"
    environment:
      ## Required if frontend and backend are different
      #- frontend.main-page.url=http://localhost:3000
      #- cors.allowed-origin=http://localhost:3000
      ## Database Configuration
      - spring.datasource.url=jdbc:mysql://mysqldb:3306/lpvs
      - spring.datasource.username=root
      - spring.datasource.password=
      - spring.jpa.properties.hibernate.default_schema=lpvs
      ## Github data for fetching code
      - github.login=
      - github.token=
      - github.api.url=https://api.github.com
      - github.secret=LPVS
      ## Google OAuth Login
      - spring.security.oauth2.client.registration.google.client-id=GOOGLE_CLIENT_ID
      - spring.security.oauth2.client.registration.google.client-secret=GOOGLE_CLIENT_SECRET
      - spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:7896/login/oauth2/code/google
      - spring.security.oauth2.client.registration.google.scope=profile, email
      ## Github OAuth Login
      - spring.security.oauth2.client.registration.github.client-id=GITHUB_CLIENT_ID
      - spring.security.oauth2.client.registration.github.client-secret=GITHUB_CLIENT_SECRET
      - spring.security.oauth2.client.registration.github.redirect-uri=http://localhost:7896/login/oauth2/code/github
      - spring.security.oauth2.client.registration.github.scope=user
      ## Github Enterprise Configuration if necessary
      #- spring.security.oauth2.client.provider.github.authorization-uri=https://HOSTNAME/login/oauth/authorize
      #- spring.security.oauth2.client.provider.github.token-uri=https://HOSTNAME/login/oauth/access_token
      #- spring.security.oauth2.client.provider.github.user-info-uri=https://HOSTNAME/api/v3/user

    depends_on:
      mysqldb:
        condition: service_healthy
    networks:
      - lpvs

  mysqldb:
    image: mysql:latest
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_ROOT_PASSWORD: ""
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    volumes:
      #- ./mysql-lpvs-data:/var/lib/mysql # db storage
      - ./src/main/resources/database_dump.sql:/docker-entrypoint-initdb.d/init.sql # init for creating db lpvs with predifined tables
      ##- ./conf/my.cnf:/etc/mysql/my.cnf # custom mysql config- if needed
    networks:
      - lpvs

  ngrok:
    image: wernight/ngrok
    command: ngrok http lpvs:7896
    ## NGROK Auth token
    environment:
      - NGROK_AUTHTOKEN=
    ports:
      - "4040:4040"
    depends_on:
      - lpvs
    networks:
      - lpvs

networks:
  lpvs:
