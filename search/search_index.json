{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"License Pre-Validation Service (LPVS) Introduction Open-source code (that is a software that is freely available for use, study, modification, and distribution) must meet conditions of the respective license(s) of all of its dependencies. Miscompliance may lead to legal disputes, fines, obligation to disclose intellectual property, as well as reputational damage. In projects with numerous external dependencies, it becomes challenging to track license obligations accurately. Also, when many collaborators are involved, the risk of unintentional license violations, such as through copy-pasting code snippets, increases. Furthermore, there are nuanced situations like dependencies with dual licensing or licenses that may change due to ownership, purpose, or legislative alterations. These factors can potentially turn previously safe dependencies into unsafe ones over time. To address these license-related risks for open-source code, we have developed the License Pre-Validation Service (LPVS) . This tool provides a solution to mitigate potential license issues. By analyzing the project, LPVS identifies its components and their respective licenses at every commit. Then it generates a list of potential issue cases, and communicates them to the developers as comments on GitHub. LPVS offers a comprehensive description of possible license violations, including the details on the location of risky code and an overview of the specific license-related issues. With LPVS , we aim at assisting developers and project teams with ensuring license compliance for their open-source code. By providing insights into the potential license violations and their implications, LPVS enables proactive management of license-related risks throughout the development process. We believe that LPVS will be an invaluable tool for maintaining the integrity of open-source projects and safeguarding against license infringements. Features License Scanners : LPVS integrates with the SCANOSS license scanner, allowing for comprehensive license analysis of the project's components. SCANOSS helps to identify the licenses associated with the codebase, ensuring the compliance with open-source license requirements. By leveraging SCANOSS, LPVS provides accurate and up-to-date information on the licenses used in the project. GitHub Review System Integration : LPVS seamlessly integrates with the GitHub review system, enhancing the collaboration and code review process. LPVS automatically generates comments on GitHub, highlighting potential license violations or issues within the codebase. This integration streamlines the review process, making it easier for the developers and collaborators to identify and address license-related concerns directly within the GitHub environment. Continuous Monitoring : LPVS facilitates continuous monitoring of license-related risks throughout the development process. By analyzing each commit, LPVS ensures that any changes or additions to the codebase are assessed for potential license violations. This ongoing monitoring allows developers to proactively manage license compliance and address any issues that arise in a timely manner. Risk Mitigation : LPVS aims at mitigating license-related risks by providing early detection and identification of potential violations. By alerting developers about potential issues and by providing the necessary information to understand and address them, LPVS empowers teams to take proactive steps to ensure compliance with open-source licenses. This helps mitigate the risk of legal disputes, financial liabilities, and reputational damage associated with license violations. With these features, LPVS assists developers to manage license compliance for their open-source projects effectively. By integration with license scanning tools, supporting the GitHub review system, and providing comprehensive issue descriptions, LPVS offers a robust solution for identifying and addressing license-related risks in the software development lifecycle.","title":"Home"},{"location":"#license-pre-validation-service-lpvs","text":"","title":"License Pre-Validation Service (LPVS)"},{"location":"#introduction","text":"Open-source code (that is a software that is freely available for use, study, modification, and distribution) must meet conditions of the respective license(s) of all of its dependencies. Miscompliance may lead to legal disputes, fines, obligation to disclose intellectual property, as well as reputational damage. In projects with numerous external dependencies, it becomes challenging to track license obligations accurately. Also, when many collaborators are involved, the risk of unintentional license violations, such as through copy-pasting code snippets, increases. Furthermore, there are nuanced situations like dependencies with dual licensing or licenses that may change due to ownership, purpose, or legislative alterations. These factors can potentially turn previously safe dependencies into unsafe ones over time. To address these license-related risks for open-source code, we have developed the License Pre-Validation Service (LPVS) . This tool provides a solution to mitigate potential license issues. By analyzing the project, LPVS identifies its components and their respective licenses at every commit. Then it generates a list of potential issue cases, and communicates them to the developers as comments on GitHub. LPVS offers a comprehensive description of possible license violations, including the details on the location of risky code and an overview of the specific license-related issues. With LPVS , we aim at assisting developers and project teams with ensuring license compliance for their open-source code. By providing insights into the potential license violations and their implications, LPVS enables proactive management of license-related risks throughout the development process. We believe that LPVS will be an invaluable tool for maintaining the integrity of open-source projects and safeguarding against license infringements.","title":"Introduction"},{"location":"#features","text":"License Scanners : LPVS integrates with the SCANOSS license scanner, allowing for comprehensive license analysis of the project's components. SCANOSS helps to identify the licenses associated with the codebase, ensuring the compliance with open-source license requirements. By leveraging SCANOSS, LPVS provides accurate and up-to-date information on the licenses used in the project. GitHub Review System Integration : LPVS seamlessly integrates with the GitHub review system, enhancing the collaboration and code review process. LPVS automatically generates comments on GitHub, highlighting potential license violations or issues within the codebase. This integration streamlines the review process, making it easier for the developers and collaborators to identify and address license-related concerns directly within the GitHub environment. Continuous Monitoring : LPVS facilitates continuous monitoring of license-related risks throughout the development process. By analyzing each commit, LPVS ensures that any changes or additions to the codebase are assessed for potential license violations. This ongoing monitoring allows developers to proactively manage license compliance and address any issues that arise in a timely manner. Risk Mitigation : LPVS aims at mitigating license-related risks by providing early detection and identification of potential violations. By alerting developers about potential issues and by providing the necessary information to understand and address them, LPVS empowers teams to take proactive steps to ensure compliance with open-source licenses. This helps mitigate the risk of legal disputes, financial liabilities, and reputational damage associated with license violations. With these features, LPVS assists developers to manage license compliance for their open-source projects effectively. By integration with license scanning tools, supporting the GitHub review system, and providing comprehensive issue descriptions, LPVS offers a robust solution for identifying and addressing license-related risks in the software development lifecycle.","title":"Features"},{"location":"quick-start-guide/","text":"Quick Start Guide Minimal configuration to set up and run the LPVS service locally. Configure the repository To enable LPVS license scanning for your repository, you need to set up GitHub Webhooks: Create a personal GitHub access token ( personal-token ) according to the GitHub webhook configuration guide . Get a personal Ngrok authentication token ( auth-token ) to expose your local service on the Ngrok portal . Configure the webhook in your GitHub repository settings. Configure and run Docker images This section explains how to download and run pre-built LPVS Docker image with ngrok reverse proxy. Set up LPVS Docker environment variables Open docker-compose-quick.yml file. In the environment part of lpvs section find and fill github.login and github.token (refer to the guide ). - github.login=<github-login> - github.token=<personal-token> In the environment part of the ngrok section find and fill auth-token from Ngrok portal . - NGROK_AUTHTOKEN=<auth-token> Run LPVS and MySQL Docker images with docker compose Start the LPVS services: docker compose -f docker-compose-quick.yml up -d To stop the LPVS services: docker compose -f docker-compose-quick.yml down Configuration is now completed! Test your pull request You can now create a new pull request or update an existing one with new commits. LPVS will automatically start the scan and provide a comment about the licenses found in the project. Example of the LPVS comment on GitHub:","title":"Quick Start Guide"},{"location":"quick-start-guide/#quick-start-guide","text":"Minimal configuration to set up and run the LPVS service locally.","title":"Quick Start Guide"},{"location":"quick-start-guide/#configure-the-repository","text":"To enable LPVS license scanning for your repository, you need to set up GitHub Webhooks: Create a personal GitHub access token ( personal-token ) according to the GitHub webhook configuration guide . Get a personal Ngrok authentication token ( auth-token ) to expose your local service on the Ngrok portal . Configure the webhook in your GitHub repository settings.","title":"Configure the repository"},{"location":"quick-start-guide/#configure-and-run-docker-images","text":"This section explains how to download and run pre-built LPVS Docker image with ngrok reverse proxy.","title":"Configure and run Docker images"},{"location":"quick-start-guide/#set-up-lpvs-docker-environment-variables","text":"Open docker-compose-quick.yml file. In the environment part of lpvs section find and fill github.login and github.token (refer to the guide ). - github.login=<github-login> - github.token=<personal-token> In the environment part of the ngrok section find and fill auth-token from Ngrok portal . - NGROK_AUTHTOKEN=<auth-token>","title":"Set up LPVS Docker environment variables"},{"location":"quick-start-guide/#run-lpvs-and-mysql-docker-images-with-docker-compose","text":"Start the LPVS services: docker compose -f docker-compose-quick.yml up -d To stop the LPVS services: docker compose -f docker-compose-quick.yml down Configuration is now completed!","title":"Run LPVS and MySQL Docker images with docker compose"},{"location":"quick-start-guide/#test-your-pull-request","text":"You can now create a new pull request or update an existing one with new commits. LPVS will automatically start the scan and provide a comment about the licenses found in the project. Example of the LPVS comment on GitHub:","title":"Test your pull request"},{"location":"about/license/","text":"License The legal stuff. LPVS License (MIT) Copyright (c) 2022, Samsung Electronics Co., Ltd. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"The legal stuff.","title":"License"},{"location":"about/license/#lpvs-license-mit","text":"Copyright (c) 2022, Samsung Electronics Co., Ltd. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LPVS License (MIT)"},{"location":"about/releases/","text":"Releases Where to get the latest released version of LPVS. Used version You can determine your currently used version of LPVS by running the next command in console and checking the logs: $ java -jar lpvs-x.y.z.jar Latest releases Actual releases with release notes are available on GitHub . Maintenance team The current and past members of the LPVS team. @MoonkiHong @tiokim @o-kopysov @tdrozdovsky @m-rudyk @v-kerimov @o-konoval @t-naumenko","title":"Releases"},{"location":"about/releases/#releases","text":"Where to get the latest released version of LPVS.","title":"Releases"},{"location":"about/releases/#used-version","text":"You can determine your currently used version of LPVS by running the next command in console and checking the logs: $ java -jar lpvs-x.y.z.jar","title":"Used version"},{"location":"about/releases/#latest-releases","text":"Actual releases with release notes are available on GitHub .","title":"Latest releases"},{"location":"about/releases/#maintenance-team","text":"The current and past members of the LPVS team. @MoonkiHong @tiokim @o-kopysov @tdrozdovsky @m-rudyk @v-kerimov @o-konoval @t-naumenko","title":"Maintenance team"},{"location":"dev-guide/","text":"Developer Guide Extending LPVS The LPVS Developer Guide provides documentation for developers and contributors. You can jump directly to the pages listed below, or use the next and previous buttons in the navigation bar at the top of the page to move through the documentation in order. Architecture Contributing guide Coding style Testing policy Code review requirements API reference Integration guide FAQ","title":"Developer guide"},{"location":"dev-guide/#developer-guide","text":"Extending LPVS The LPVS Developer Guide provides documentation for developers and contributors. You can jump directly to the pages listed below, or use the next and previous buttons in the navigation bar at the top of the page to move through the documentation in order. Architecture Contributing guide Coding style Testing policy Code review requirements API reference Integration guide FAQ","title":"Developer Guide"},{"location":"dev-guide/api/","text":"API reference Automatically generated from LPVS OpenAPI v3.0.0 LPVS API v2-20231228 License Pre-Validation Service (LPVS) is a tool designed to proactively manage license-related risks in Open Source code. It conducts in-depth analysis of your project, meticulously identifying components and their associated licenses with every commit. LPVS empowers your development workflow by ensuring compliance and providing insights into licensing aspects, enhancing the overall health and robustness of your software projects. Contact: o.kopysov@samsung.com License: MIT GitHub Webhooks API POST /webhooks Start Scan Description Endpoint for handling GitHub webhook events and processing the payload. Input parameters Parameter In Type Default Nullable Description X-Hub-Signature-256 header string No Request body application/json { \"action\" : \"opened\" , \"repository\" : { \"name\" : \"LPVS\" , \"full_name\" : \"Samsung/LPVS\" , \"html_url\" : \"https://github.com/Samsung/LPVS\" }, \"pull_request\" : { \"html_url\" : \"https://github.com/Samsung/LPVS/pull/18\" , \"head\" : { \"repo\" : { \"fork\" : \"true\" , \"html_url\" : \"https://github.com/Samsung/LPVS/tree/utests\" }, \"sha\" : \"edde69ecb8e8a88dde09fa9789e2c9cab7cf7cf9\" , \"ref\" : \"Samsung:utests\" }, \"url\" : \"https://api.github.com/repos/Samsung/LPVS/pulls/18\" } } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"type\" : \"object\" , \"properties\" : { \"action\" : { \"type\" : \"string\" , \"example\" : \"opened\" }, \"repository\" : { \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"example\" : \"LPVS\" }, \"full_name\" : { \"type\" : \"string\" , \"example\" : \"Samsung/LPVS\" }, \"html_url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://github.com/Samsung/LPVS\" } } }, \"pull_request\" : { \"type\" : \"object\" , \"properties\" : { \"html_url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://github.com/Samsung/LPVS/pull/18\" }, \"head\" : { \"type\" : \"object\" , \"properties\" : { \"repo\" : { \"type\" : \"object\" , \"properties\" : { \"fork\" : { \"type\" : \"string\" , \"example\" : \"true\" }, \"html_url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://github.com/Samsung/LPVS/tree/utests\" } } }, \"sha\" : { \"type\" : \"string\" , \"example\" : \"edde69ecb8e8a88dde09fa9789e2c9cab7cf7cf9\" }, \"ref\" : { \"type\" : \"string\" , \"example\" : \"Samsung:utests\" } } }, \"url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://api.github.com/repos/Samsung/LPVS/pulls/18\" } } } } } Response 200 OK application/json { \"message\" : \"Success\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"message\" : { \"type\" : \"string\" , \"format\" : \"uuid\" , \"example\" : \"Success\" } } } Response 403 Forbidden application/json { \"message\" : \"Error\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"message\" : { \"type\" : \"string\" , \"format\" : \"uuid\" , \"example\" : \"Error\" } } } POST / Forward to Start Scan Description Forwards the request to the /webhooks endpoint. Request body application/json { \"action\" : \"opened\" , \"repository\" : { \"name\" : \"LPVS\" , \"full_name\" : \"Samsung/LPVS\" , \"html_url\" : \"https://github.com/Samsung/LPVS\" }, \"pull_request\" : { \"html_url\" : \"https://github.com/Samsung/LPVS/pull/18\" , \"head\" : { \"repo\" : { \"fork\" : \"true\" , \"html_url\" : \"https://github.com/Samsung/LPVS/tree/utests\" }, \"sha\" : \"edde69ecb8e8a88dde09fa9789e2c9cab7cf7cf9\" , \"ref\" : \"Samsung:utests\" }, \"url\" : \"https://api.github.com/repos/Samsung/LPVS/pulls/18\" } } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"type\" : \"object\" , \"properties\" : { \"action\" : { \"type\" : \"string\" , \"example\" : \"opened\" }, \"repository\" : { \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"example\" : \"LPVS\" }, \"full_name\" : { \"type\" : \"string\" , \"example\" : \"Samsung/LPVS\" }, \"html_url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://github.com/Samsung/LPVS\" } } }, \"pull_request\" : { \"type\" : \"object\" , \"properties\" : { \"html_url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://github.com/Samsung/LPVS/pull/18\" }, \"head\" : { \"type\" : \"object\" , \"properties\" : { \"repo\" : { \"type\" : \"object\" , \"properties\" : { \"fork\" : { \"type\" : \"string\" , \"example\" : \"true\" }, \"html_url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://github.com/Samsung/LPVS/tree/utests\" } } }, \"sha\" : { \"type\" : \"string\" , \"example\" : \"edde69ecb8e8a88dde09fa9789e2c9cab7cf7cf9\" }, \"ref\" : { \"type\" : \"string\" , \"example\" : \"Samsung:utests\" } } }, \"url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://api.github.com/repos/Samsung/LPVS/pulls/18\" } } } } } Response 200 OK application/json { \"message\" : \"Success\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"message\" : { \"type\" : \"string\" , \"format\" : \"uuid\" , \"example\" : \"Success\" } } } Response 403 Forbidden application/json { \"message\" : \"Error\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"message\" : { \"type\" : \"string\" , \"format\" : \"uuid\" , \"example\" : \"Error\" } } } GitHub Pull Request Single Scan API POST /scan/ {gitHubOrg} / {gitHubRepo} / {prNumber} GitHub Pull Request Single Scan Description Endpoint for performing a single scan operation based on GitHub organization, repository, and pull request number. Input parameters Parameter In Type Default Nullable Description gitHubOrg path string No GitHub organization name gitHubRepo path string No GitHub repository name prNumber path integer No Pull request number Response 200 OK application/json { \"message\" : \"Success\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"message\" : { \"type\" : \"string\" , \"format\" : \"uuid\" , \"example\" : \"Success\" } } } Response 403 Forbidden application/json { \"message\" : \"Error\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"message\" : { \"type\" : \"string\" , \"format\" : \"uuid\" , \"example\" : \"Error\" } } } Web API GET /api/v1/web/user/login User Login Description Retrieves login details for the authenticated user. Response 200 OK application/json { \"isLoggedIn\" : true , \"member\" : { \"id\" : 1 , \"name\" : \"John Doe\" , \"email\" : \"john.doe@example.com\" , \"provider\" : \"GitHub\" , \"nickname\" : \"johndoe\" , \"organization\" : \"Acme Corp\" } } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"isLoggedIn\" : { \"type\" : \"boolean\" , \"description\" : \"Indicates whether the member is logged in or not\" , \"example\" : true }, \"member\" : { \"$ref\" : \"#/components/schemas/LPVSMember\" } } } Response 401 Unauthorized Response 500 Internal Server Error GET /api/v1/web/user/info Retrieve User Information Description Retrieves personal information settings for the authenticated user. Response 200 OK application/json { \"id\" : 1 , \"name\" : \"John Doe\" , \"email\" : \"john.doe@example.com\" , \"provider\" : \"GitHub\" , \"nickname\" : \"johndoe\" , \"organization\" : \"Acme Corp\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"id\" : { \"type\" : \"integer\" , \"description\" : \"The unique identifier of the member\" , \"example\" : 1 }, \"name\" : { \"type\" : \"string\" , \"description\" : \"The name of the member\" , \"example\" : \"John Doe\" }, \"email\" : { \"type\" : \"string\" , \"format\" : \"email\" , \"description\" : \"The email address of the member\" , \"example\" : \"john.doe@example.com\" }, \"provider\" : { \"type\" : \"string\" , \"description\" : \"The provider associated with the member\" , \"example\" : \"GitHub\" }, \"nickname\" : { \"type\" : \"string\" , \"description\" : \"The nickname of the member\" , \"example\" : \"johndoe\" }, \"organization\" : { \"type\" : \"string\" , \"description\" : \"The organization associated with the member\" , \"example\" : \"Acme Corp\" } } } Response 401 Unauthorized Response 500 Internal Server Error POST /api/v1/web/user/update Update User Settings Description Updates user settings based on the provided data in the request body. Request body application/json { \"nickname\" : \"string\" , \"organization\" : \"string\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"type\" : \"object\" , \"properties\" : { \"nickname\" : { \"type\" : \"string\" , \"description\" : \"User's new nickname\" }, \"organization\" : { \"type\" : \"string\" , \"description\" : \"User's new organization\" } } } Response 200 OK application/json { \"id\" : 1 , \"name\" : \"John Doe\" , \"email\" : \"john.doe@example.com\" , \"provider\" : \"GitHub\" , \"nickname\" : \"johndoe\" , \"organization\" : \"Acme Corp\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"id\" : { \"type\" : \"integer\" , \"description\" : \"The unique identifier of the member\" , \"example\" : 1 }, \"name\" : { \"type\" : \"string\" , \"description\" : \"The name of the member\" , \"example\" : \"John Doe\" }, \"email\" : { \"type\" : \"string\" , \"format\" : \"email\" , \"description\" : \"The email address of the member\" , \"example\" : \"john.doe@example.com\" }, \"provider\" : { \"type\" : \"string\" , \"description\" : \"The provider associated with the member\" , \"example\" : \"GitHub\" }, \"nickname\" : { \"type\" : \"string\" , \"description\" : \"The nickname of the member\" , \"example\" : \"johndoe\" }, \"organization\" : { \"type\" : \"string\" , \"description\" : \"The organization associated with the member\" , \"example\" : \"Acme Corp\" } } } Response 401 Unauthorized Response 500 Internal Server Error GET /api/v1/web/history/ {type} / {name} Retrieve History Page Entity Description Retrieves the history page entity based on the specified type and name. Input parameters Parameter In Type Default Nullable Description name path string No The name of the user or organization. pageable query None No The pageable object for pagination. type path string No The type of history (e.g., \"own\", \"org\", \"send\"). Response 200 OK application/json { \"lpvsHistories\" : [ { \"scanDate\" : \"2023-01-01\" , \"repositoryName\" : \"example-repo\" , \"pullRequestId\" : 123 , \"url\" : \"https://example.com/pull/123\" , \"status\" : \"pending\" , \"sender\" : \"JohnDoe\" , \"pullNumber\" : \"pull/123\" , \"hasIssue\" : true } ], \"count\" : 10 } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"lpvsHistories\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/LPVSHistory\" }, \"description\" : \"List of LPVSHistory entries\" }, \"count\" : { \"type\" : \"integer\" , \"description\" : \"The count of history entries\" , \"example\" : 10 } } } Response 401 Unauthorized Response 500 Internal Server Error GET /api/v1/web/result/ {prId} Retrieve LPVSResult for Pull Request Description Retrieves the LPVSResult for a specific pull request ID. Input parameters Parameter In Type Default Nullable Description pageable query None No The pageable object for pagination. prId path number No The pull request ID. Response 200 OK application/json { \"lpvsResultFileList\" : [ { \"id\" : 1 , \"path\" : \"src/main/java/Example.java\" , \"componentFileUrl\" : \"https://example.com/file/1\" , \"matchLine\" : \"42\" , \"matchValue\" : \"Snippet\" , \"status\" : \"license.PERMITTED\" , \"licenseSpdx\" : \"MIT\" } ], \"lpvsResultInfo\" : { \"id\" : 1 , \"scanDate\" : \"2023-01-01T12:00:00Z\" , \"repositoryName\" : \"example-repo\" , \"status\" : \"pending\" , \"detectedLicenses\" : [ \"string\" ] }, \"count\" : 10 , \"licenseCountMap\" : { \"MIT\" : 3 , \"Apache-2.0\" : 2 }, \"pullNumber\" : \"pull/123\" , \"hasIssue\" : true } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"lpvsResultFileList\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/LPVSResultFile\" }, \"description\" : \"List of LPVSResultFile entries\" }, \"lpvsResultInfo\" : { \"$ref\" : \"#/components/schemas/LPVSResultInfo\" }, \"count\" : { \"type\" : \"integer\" , \"description\" : \"The count of results\" , \"example\" : 10 }, \"licenseCountMap\" : { \"type\" : \"object\" , \"additionalProperties\" : { \"type\" : \"integer\" }, \"description\" : \"Map of license counts\" , \"example\" : { \"MIT\" : 3 , \"Apache-2.0\" : 2 } }, \"pullNumber\" : { \"type\" : \"string\" , \"description\" : \"The pull request number\" , \"example\" : \"pull/123\" }, \"hasIssue\" : { \"type\" : \"boolean\" , \"description\" : \"Indicates whether the result has an issue or not\" , \"example\" : true } } } Response 401 Unauthorized Response 500 Internal Server Error GET /api/v1/web/dashboard/ {type} / {name} Retrieve Dashboard Entity Description Retrieves the Dashboard entity based on the specified type and name. Input parameters Parameter In Type Default Nullable Description name path string No The name of the user or organization. type path string No The type of the dashboard (e.g., user, organization). Response 200 OK application/json { \"name\" : \"john-doe\" , \"licenseCountMap\" : { \"MIT\" : 3 , \"Apache-2.0\" : 2 }, \"totalDetectionCount\" : 100 , \"highSimilarityCount\" : 20 , \"totalIssueCount\" : 5 , \"totalParticipantsCount\" : 50 , \"totalRepositoryCount\" : 10 , \"dashboardElementsByDates\" : [ { \"date\" : \"2023-01-01\" , \"participantCount\" : 5 , \"pullRequestCount\" : 10 , \"riskGradeMap\" : { \"SERIOUS\" : 2 , \"HIGH\" : 3 , \"MIDDLE\" : 5 , \"LOW\" : 8 , \"NONE\" : 2 } } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"description\" : \"The name of the user or organization\" , \"example\" : \"john-doe\" }, \"licenseCountMap\" : { \"type\" : \"object\" , \"additionalProperties\" : { \"type\" : \"integer\" }, \"description\" : \"Map of license counts\" , \"example\" : { \"MIT\" : 3 , \"Apache-2.0\" : 2 } }, \"totalDetectionCount\" : { \"type\" : \"integer\" , \"description\" : \"The total number of detections\" , \"example\" : 100 }, \"highSimilarityCount\" : { \"type\" : \"integer\" , \"description\" : \"The count of high similarity detections\" , \"example\" : 20 }, \"totalIssueCount\" : { \"type\" : \"integer\" , \"description\" : \"The total number of issues\" , \"example\" : 5 }, \"totalParticipantsCount\" : { \"type\" : \"integer\" , \"description\" : \"The total number of participants\" , \"example\" : 50 }, \"totalRepositoryCount\" : { \"type\" : \"integer\" , \"description\" : \"The total number of repositories\" , \"example\" : 10 }, \"dashboardElementsByDates\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/DashboardElementsByDate\" }, \"description\" : \"List of DashboardElementsByDate entries\" } } } Response 401 Unauthorized Response 500 Internal Server Error Schemas Dashboard Name Type dashboardElementsByDates Array< DashboardElementsByDate > highSimilarityCount integer licenseCountMap Example: {'MIT': 3, 'Apache-2.0': 2} name string totalDetectionCount integer totalIssueCount integer totalParticipantsCount integer totalRepositoryCount integer DashboardElementsByDate Name Type date string ( date ) participantCount integer pullRequestCount integer riskGradeMap Example: {'SERIOUS': 2, 'HIGH': 3, 'MIDDLE': 5, 'LOW': 8, 'NONE': 2} HistoryEntity Name Type count integer lpvsHistories Array< LPVSHistory > LPVSHistory Name Type hasIssue boolean pullNumber string pullRequestId integer repositoryName string scanDate string sender string status string url string ( uri ) LPVSLoginMember Name Type isLoggedIn boolean member LPVSMember LPVSMember Name Type email string ( email ) id integer name string nickname string organization string provider string LPVSResult Name Type count integer hasIssue boolean licenseCountMap Example: {'MIT': 3, 'Apache-2.0': 2} lpvsResultFileList Array< LPVSResultFile > lpvsResultInfo LPVSResultInfo pullNumber string LPVSResultFile Name Type componentFileUrl string ( uri ) id integer licenseSpdx string matchLine string matchValue string path string status string LPVSResultInfo Name Type detectedLicenses Array< string > id integer repositoryName string scanDate string ( date-time ) status string Pageable Name Type direction string page integer size integer sort string UserUpdateRequest Name Type nickname string organization string WebhookRequest Name Type action string pull_request Properties: html_url, head, url repository Properties: name, full_name, html_url WebhookResponseForbidden Name Type message string ( uuid ) WebhookResponseOK Name Type message string ( uuid )","title":"API reference"},{"location":"dev-guide/api/#api-reference","text":"Automatically generated from LPVS OpenAPI v3.0.0","title":"API reference"},{"location":"dev-guide/api/#lpvs-api-v2-20231228","text":"License Pre-Validation Service (LPVS) is a tool designed to proactively manage license-related risks in Open Source code. It conducts in-depth analysis of your project, meticulously identifying components and their associated licenses with every commit. LPVS empowers your development workflow by ensuring compliance and providing insights into licensing aspects, enhancing the overall health and robustness of your software projects. Contact: o.kopysov@samsung.com License: MIT","title":"LPVS API v2-20231228"},{"location":"dev-guide/api/#github-webhooks-api","text":"","title":"GitHub Webhooks API"},{"location":"dev-guide/api/#post-webhooks","text":"Start Scan Description Endpoint for handling GitHub webhook events and processing the payload. Input parameters Parameter In Type Default Nullable Description X-Hub-Signature-256 header string No Request body application/json { \"action\" : \"opened\" , \"repository\" : { \"name\" : \"LPVS\" , \"full_name\" : \"Samsung/LPVS\" , \"html_url\" : \"https://github.com/Samsung/LPVS\" }, \"pull_request\" : { \"html_url\" : \"https://github.com/Samsung/LPVS/pull/18\" , \"head\" : { \"repo\" : { \"fork\" : \"true\" , \"html_url\" : \"https://github.com/Samsung/LPVS/tree/utests\" }, \"sha\" : \"edde69ecb8e8a88dde09fa9789e2c9cab7cf7cf9\" , \"ref\" : \"Samsung:utests\" }, \"url\" : \"https://api.github.com/repos/Samsung/LPVS/pulls/18\" } } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"type\" : \"object\" , \"properties\" : { \"action\" : { \"type\" : \"string\" , \"example\" : \"opened\" }, \"repository\" : { \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"example\" : \"LPVS\" }, \"full_name\" : { \"type\" : \"string\" , \"example\" : \"Samsung/LPVS\" }, \"html_url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://github.com/Samsung/LPVS\" } } }, \"pull_request\" : { \"type\" : \"object\" , \"properties\" : { \"html_url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://github.com/Samsung/LPVS/pull/18\" }, \"head\" : { \"type\" : \"object\" , \"properties\" : { \"repo\" : { \"type\" : \"object\" , \"properties\" : { \"fork\" : { \"type\" : \"string\" , \"example\" : \"true\" }, \"html_url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://github.com/Samsung/LPVS/tree/utests\" } } }, \"sha\" : { \"type\" : \"string\" , \"example\" : \"edde69ecb8e8a88dde09fa9789e2c9cab7cf7cf9\" }, \"ref\" : { \"type\" : \"string\" , \"example\" : \"Samsung:utests\" } } }, \"url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://api.github.com/repos/Samsung/LPVS/pulls/18\" } } } } } Response 200 OK application/json { \"message\" : \"Success\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"message\" : { \"type\" : \"string\" , \"format\" : \"uuid\" , \"example\" : \"Success\" } } } Response 403 Forbidden application/json { \"message\" : \"Error\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"message\" : { \"type\" : \"string\" , \"format\" : \"uuid\" , \"example\" : \"Error\" } } }","title":"POST /webhooks"},{"location":"dev-guide/api/#post","text":"Forward to Start Scan Description Forwards the request to the /webhooks endpoint. Request body application/json { \"action\" : \"opened\" , \"repository\" : { \"name\" : \"LPVS\" , \"full_name\" : \"Samsung/LPVS\" , \"html_url\" : \"https://github.com/Samsung/LPVS\" }, \"pull_request\" : { \"html_url\" : \"https://github.com/Samsung/LPVS/pull/18\" , \"head\" : { \"repo\" : { \"fork\" : \"true\" , \"html_url\" : \"https://github.com/Samsung/LPVS/tree/utests\" }, \"sha\" : \"edde69ecb8e8a88dde09fa9789e2c9cab7cf7cf9\" , \"ref\" : \"Samsung:utests\" }, \"url\" : \"https://api.github.com/repos/Samsung/LPVS/pulls/18\" } } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"type\" : \"object\" , \"properties\" : { \"action\" : { \"type\" : \"string\" , \"example\" : \"opened\" }, \"repository\" : { \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"example\" : \"LPVS\" }, \"full_name\" : { \"type\" : \"string\" , \"example\" : \"Samsung/LPVS\" }, \"html_url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://github.com/Samsung/LPVS\" } } }, \"pull_request\" : { \"type\" : \"object\" , \"properties\" : { \"html_url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://github.com/Samsung/LPVS/pull/18\" }, \"head\" : { \"type\" : \"object\" , \"properties\" : { \"repo\" : { \"type\" : \"object\" , \"properties\" : { \"fork\" : { \"type\" : \"string\" , \"example\" : \"true\" }, \"html_url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://github.com/Samsung/LPVS/tree/utests\" } } }, \"sha\" : { \"type\" : \"string\" , \"example\" : \"edde69ecb8e8a88dde09fa9789e2c9cab7cf7cf9\" }, \"ref\" : { \"type\" : \"string\" , \"example\" : \"Samsung:utests\" } } }, \"url\" : { \"type\" : \"string\" , \"format\" : \"uri\" , \"example\" : \"https://api.github.com/repos/Samsung/LPVS/pulls/18\" } } } } } Response 200 OK application/json { \"message\" : \"Success\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"message\" : { \"type\" : \"string\" , \"format\" : \"uuid\" , \"example\" : \"Success\" } } } Response 403 Forbidden application/json { \"message\" : \"Error\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"message\" : { \"type\" : \"string\" , \"format\" : \"uuid\" , \"example\" : \"Error\" } } }","title":"POST /"},{"location":"dev-guide/api/#github-pull-request-single-scan-api","text":"","title":"GitHub Pull Request Single Scan API"},{"location":"dev-guide/api/#post-scangithuborggithubrepoprnumber","text":"GitHub Pull Request Single Scan Description Endpoint for performing a single scan operation based on GitHub organization, repository, and pull request number. Input parameters Parameter In Type Default Nullable Description gitHubOrg path string No GitHub organization name gitHubRepo path string No GitHub repository name prNumber path integer No Pull request number Response 200 OK application/json { \"message\" : \"Success\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"message\" : { \"type\" : \"string\" , \"format\" : \"uuid\" , \"example\" : \"Success\" } } } Response 403 Forbidden application/json { \"message\" : \"Error\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"message\" : { \"type\" : \"string\" , \"format\" : \"uuid\" , \"example\" : \"Error\" } } }","title":"POST /scan/{gitHubOrg}/{gitHubRepo}/{prNumber}"},{"location":"dev-guide/api/#web-api","text":"","title":"Web API"},{"location":"dev-guide/api/#get-apiv1webuserlogin","text":"User Login Description Retrieves login details for the authenticated user. Response 200 OK application/json { \"isLoggedIn\" : true , \"member\" : { \"id\" : 1 , \"name\" : \"John Doe\" , \"email\" : \"john.doe@example.com\" , \"provider\" : \"GitHub\" , \"nickname\" : \"johndoe\" , \"organization\" : \"Acme Corp\" } } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"isLoggedIn\" : { \"type\" : \"boolean\" , \"description\" : \"Indicates whether the member is logged in or not\" , \"example\" : true }, \"member\" : { \"$ref\" : \"#/components/schemas/LPVSMember\" } } } Response 401 Unauthorized Response 500 Internal Server Error","title":"GET /api/v1/web/user/login"},{"location":"dev-guide/api/#get-apiv1webuserinfo","text":"Retrieve User Information Description Retrieves personal information settings for the authenticated user. Response 200 OK application/json { \"id\" : 1 , \"name\" : \"John Doe\" , \"email\" : \"john.doe@example.com\" , \"provider\" : \"GitHub\" , \"nickname\" : \"johndoe\" , \"organization\" : \"Acme Corp\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"id\" : { \"type\" : \"integer\" , \"description\" : \"The unique identifier of the member\" , \"example\" : 1 }, \"name\" : { \"type\" : \"string\" , \"description\" : \"The name of the member\" , \"example\" : \"John Doe\" }, \"email\" : { \"type\" : \"string\" , \"format\" : \"email\" , \"description\" : \"The email address of the member\" , \"example\" : \"john.doe@example.com\" }, \"provider\" : { \"type\" : \"string\" , \"description\" : \"The provider associated with the member\" , \"example\" : \"GitHub\" }, \"nickname\" : { \"type\" : \"string\" , \"description\" : \"The nickname of the member\" , \"example\" : \"johndoe\" }, \"organization\" : { \"type\" : \"string\" , \"description\" : \"The organization associated with the member\" , \"example\" : \"Acme Corp\" } } } Response 401 Unauthorized Response 500 Internal Server Error","title":"GET /api/v1/web/user/info"},{"location":"dev-guide/api/#post-apiv1webuserupdate","text":"Update User Settings Description Updates user settings based on the provided data in the request body. Request body application/json { \"nickname\" : \"string\" , \"organization\" : \"string\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"type\" : \"object\" , \"properties\" : { \"nickname\" : { \"type\" : \"string\" , \"description\" : \"User's new nickname\" }, \"organization\" : { \"type\" : \"string\" , \"description\" : \"User's new organization\" } } } Response 200 OK application/json { \"id\" : 1 , \"name\" : \"John Doe\" , \"email\" : \"john.doe@example.com\" , \"provider\" : \"GitHub\" , \"nickname\" : \"johndoe\" , \"organization\" : \"Acme Corp\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"id\" : { \"type\" : \"integer\" , \"description\" : \"The unique identifier of the member\" , \"example\" : 1 }, \"name\" : { \"type\" : \"string\" , \"description\" : \"The name of the member\" , \"example\" : \"John Doe\" }, \"email\" : { \"type\" : \"string\" , \"format\" : \"email\" , \"description\" : \"The email address of the member\" , \"example\" : \"john.doe@example.com\" }, \"provider\" : { \"type\" : \"string\" , \"description\" : \"The provider associated with the member\" , \"example\" : \"GitHub\" }, \"nickname\" : { \"type\" : \"string\" , \"description\" : \"The nickname of the member\" , \"example\" : \"johndoe\" }, \"organization\" : { \"type\" : \"string\" , \"description\" : \"The organization associated with the member\" , \"example\" : \"Acme Corp\" } } } Response 401 Unauthorized Response 500 Internal Server Error","title":"POST /api/v1/web/user/update"},{"location":"dev-guide/api/#get-apiv1webhistorytypename","text":"Retrieve History Page Entity Description Retrieves the history page entity based on the specified type and name. Input parameters Parameter In Type Default Nullable Description name path string No The name of the user or organization. pageable query None No The pageable object for pagination. type path string No The type of history (e.g., \"own\", \"org\", \"send\"). Response 200 OK application/json { \"lpvsHistories\" : [ { \"scanDate\" : \"2023-01-01\" , \"repositoryName\" : \"example-repo\" , \"pullRequestId\" : 123 , \"url\" : \"https://example.com/pull/123\" , \"status\" : \"pending\" , \"sender\" : \"JohnDoe\" , \"pullNumber\" : \"pull/123\" , \"hasIssue\" : true } ], \"count\" : 10 } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"lpvsHistories\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/LPVSHistory\" }, \"description\" : \"List of LPVSHistory entries\" }, \"count\" : { \"type\" : \"integer\" , \"description\" : \"The count of history entries\" , \"example\" : 10 } } } Response 401 Unauthorized Response 500 Internal Server Error","title":"GET /api/v1/web/history/{type}/{name}"},{"location":"dev-guide/api/#get-apiv1webresultprid","text":"Retrieve LPVSResult for Pull Request Description Retrieves the LPVSResult for a specific pull request ID. Input parameters Parameter In Type Default Nullable Description pageable query None No The pageable object for pagination. prId path number No The pull request ID. Response 200 OK application/json { \"lpvsResultFileList\" : [ { \"id\" : 1 , \"path\" : \"src/main/java/Example.java\" , \"componentFileUrl\" : \"https://example.com/file/1\" , \"matchLine\" : \"42\" , \"matchValue\" : \"Snippet\" , \"status\" : \"license.PERMITTED\" , \"licenseSpdx\" : \"MIT\" } ], \"lpvsResultInfo\" : { \"id\" : 1 , \"scanDate\" : \"2023-01-01T12:00:00Z\" , \"repositoryName\" : \"example-repo\" , \"status\" : \"pending\" , \"detectedLicenses\" : [ \"string\" ] }, \"count\" : 10 , \"licenseCountMap\" : { \"MIT\" : 3 , \"Apache-2.0\" : 2 }, \"pullNumber\" : \"pull/123\" , \"hasIssue\" : true } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"lpvsResultFileList\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/LPVSResultFile\" }, \"description\" : \"List of LPVSResultFile entries\" }, \"lpvsResultInfo\" : { \"$ref\" : \"#/components/schemas/LPVSResultInfo\" }, \"count\" : { \"type\" : \"integer\" , \"description\" : \"The count of results\" , \"example\" : 10 }, \"licenseCountMap\" : { \"type\" : \"object\" , \"additionalProperties\" : { \"type\" : \"integer\" }, \"description\" : \"Map of license counts\" , \"example\" : { \"MIT\" : 3 , \"Apache-2.0\" : 2 } }, \"pullNumber\" : { \"type\" : \"string\" , \"description\" : \"The pull request number\" , \"example\" : \"pull/123\" }, \"hasIssue\" : { \"type\" : \"boolean\" , \"description\" : \"Indicates whether the result has an issue or not\" , \"example\" : true } } } Response 401 Unauthorized Response 500 Internal Server Error","title":"GET /api/v1/web/result/{prId}"},{"location":"dev-guide/api/#get-apiv1webdashboardtypename","text":"Retrieve Dashboard Entity Description Retrieves the Dashboard entity based on the specified type and name. Input parameters Parameter In Type Default Nullable Description name path string No The name of the user or organization. type path string No The type of the dashboard (e.g., user, organization). Response 200 OK application/json { \"name\" : \"john-doe\" , \"licenseCountMap\" : { \"MIT\" : 3 , \"Apache-2.0\" : 2 }, \"totalDetectionCount\" : 100 , \"highSimilarityCount\" : 20 , \"totalIssueCount\" : 5 , \"totalParticipantsCount\" : 50 , \"totalRepositoryCount\" : 10 , \"dashboardElementsByDates\" : [ { \"date\" : \"2023-01-01\" , \"participantCount\" : 5 , \"pullRequestCount\" : 10 , \"riskGradeMap\" : { \"SERIOUS\" : 2 , \"HIGH\" : 3 , \"MIDDLE\" : 5 , \"LOW\" : 8 , \"NONE\" : 2 } } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"description\" : \"The name of the user or organization\" , \"example\" : \"john-doe\" }, \"licenseCountMap\" : { \"type\" : \"object\" , \"additionalProperties\" : { \"type\" : \"integer\" }, \"description\" : \"Map of license counts\" , \"example\" : { \"MIT\" : 3 , \"Apache-2.0\" : 2 } }, \"totalDetectionCount\" : { \"type\" : \"integer\" , \"description\" : \"The total number of detections\" , \"example\" : 100 }, \"highSimilarityCount\" : { \"type\" : \"integer\" , \"description\" : \"The count of high similarity detections\" , \"example\" : 20 }, \"totalIssueCount\" : { \"type\" : \"integer\" , \"description\" : \"The total number of issues\" , \"example\" : 5 }, \"totalParticipantsCount\" : { \"type\" : \"integer\" , \"description\" : \"The total number of participants\" , \"example\" : 50 }, \"totalRepositoryCount\" : { \"type\" : \"integer\" , \"description\" : \"The total number of repositories\" , \"example\" : 10 }, \"dashboardElementsByDates\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/DashboardElementsByDate\" }, \"description\" : \"List of DashboardElementsByDate entries\" } } } Response 401 Unauthorized Response 500 Internal Server Error","title":"GET /api/v1/web/dashboard/{type}/{name}"},{"location":"dev-guide/api/#schemas","text":"","title":"Schemas"},{"location":"dev-guide/api/#dashboard","text":"Name Type dashboardElementsByDates Array< DashboardElementsByDate > highSimilarityCount integer licenseCountMap Example: {'MIT': 3, 'Apache-2.0': 2} name string totalDetectionCount integer totalIssueCount integer totalParticipantsCount integer totalRepositoryCount integer","title":"Dashboard"},{"location":"dev-guide/api/#dashboardelementsbydate","text":"Name Type date string ( date ) participantCount integer pullRequestCount integer riskGradeMap Example: {'SERIOUS': 2, 'HIGH': 3, 'MIDDLE': 5, 'LOW': 8, 'NONE': 2}","title":"DashboardElementsByDate"},{"location":"dev-guide/api/#historyentity","text":"Name Type count integer lpvsHistories Array< LPVSHistory >","title":"HistoryEntity"},{"location":"dev-guide/api/#lpvshistory","text":"Name Type hasIssue boolean pullNumber string pullRequestId integer repositoryName string scanDate string sender string status string url string ( uri )","title":"LPVSHistory"},{"location":"dev-guide/api/#lpvsloginmember","text":"Name Type isLoggedIn boolean member LPVSMember","title":"LPVSLoginMember"},{"location":"dev-guide/api/#lpvsmember","text":"Name Type email string ( email ) id integer name string nickname string organization string provider string","title":"LPVSMember"},{"location":"dev-guide/api/#lpvsresult","text":"Name Type count integer hasIssue boolean licenseCountMap Example: {'MIT': 3, 'Apache-2.0': 2} lpvsResultFileList Array< LPVSResultFile > lpvsResultInfo LPVSResultInfo pullNumber string","title":"LPVSResult"},{"location":"dev-guide/api/#lpvsresultfile","text":"Name Type componentFileUrl string ( uri ) id integer licenseSpdx string matchLine string matchValue string path string status string","title":"LPVSResultFile"},{"location":"dev-guide/api/#lpvsresultinfo","text":"Name Type detectedLicenses Array< string > id integer repositoryName string scanDate string ( date-time ) status string","title":"LPVSResultInfo"},{"location":"dev-guide/api/#pageable","text":"Name Type direction string page integer size integer sort string","title":"Pageable"},{"location":"dev-guide/api/#userupdaterequest","text":"Name Type nickname string organization string","title":"UserUpdateRequest"},{"location":"dev-guide/api/#webhookrequest","text":"Name Type action string pull_request Properties: html_url, head, url repository Properties: name, full_name, html_url","title":"WebhookRequest"},{"location":"dev-guide/api/#webhookresponseforbidden","text":"Name Type message string ( uuid )","title":"WebhookResponseForbidden"},{"location":"dev-guide/api/#webhookresponseok","text":"Name Type message string ( uuid )","title":"WebhookResponseOK"},{"location":"dev-guide/architecture/","text":"Architecture How LPVS interacts with other entities.","title":"Architecture"},{"location":"dev-guide/architecture/#architecture","text":"How LPVS interacts with other entities.","title":"Architecture"},{"location":"dev-guide/code-review-requirements/","text":"Code review requirements How to conduct code reviews in the LPVS project. Introduction Code review is a process in which one or more developers are systematically tasked with reviewing the code written by another developer in order to find defects and improve it. Code review should be done by project maintainers considering code quality and safety, sharing best practices and this leads to better collaboration, creating a culture of review, building team confidence in the code. Code Review Process Initiating a Code Review All code changes must undergo a review before merging into the main branch. The developer initiates a code review by creating a pull request. Assigning Reviewers The pull request is automatically assigned to maintainers for review. Other team members should be added manually for review. Reviewing Code Reviewers are responsible for thoroughly examining the code changes. Check for adherence to coding standards, best practices, and project guidelines. Providing Constructive Feedback Reviewers must provide clear and constructive feedback on identified issues or improvements. Discussions within the pull request are encouraged to ensure a shared understanding. Requirements Review fewer than 400 lines of code at a time. Take your time. Inspection rates should under 500 LOC per hour. Do not review for more than 60 minutes at a time. Set goals and capture metrics. Authors should annotate source code before the review. Use checklists. Establish a process for fixing defects found. Foster a positive code review culture. Embrace the subconscious implications of peer review. Practice lightweight code reviews. Code changes must receive approval from at least two team members before merging. At least one maintainer's approval is required. Critical issues raised during the review must be addressed before approval. Non-blocking feedback should be addressed in subsequent iterations. Pull requests should be kept focused on specific features or fixes. Continuous improvement in code quality is encouraged. Self-verification Checklist Coding Standards : ensure the code follows the established coding standards. Functionality : verify that the code changes address the intended functionality or issue. Edge Cases : check for handling of edge cases and potential error scenarios. Testing : confirm that appropriate tests have been added or updated. Documentation : validate that code changes are well-documented, including inline comments and README updates. Security : assess the code for potential security vulnerabilities.","title":"Code review requirements"},{"location":"dev-guide/code-review-requirements/#code-review-requirements","text":"How to conduct code reviews in the LPVS project.","title":"Code review requirements"},{"location":"dev-guide/code-review-requirements/#introduction","text":"Code review is a process in which one or more developers are systematically tasked with reviewing the code written by another developer in order to find defects and improve it. Code review should be done by project maintainers considering code quality and safety, sharing best practices and this leads to better collaboration, creating a culture of review, building team confidence in the code.","title":"Introduction"},{"location":"dev-guide/code-review-requirements/#code-review-process","text":"Initiating a Code Review All code changes must undergo a review before merging into the main branch. The developer initiates a code review by creating a pull request. Assigning Reviewers The pull request is automatically assigned to maintainers for review. Other team members should be added manually for review. Reviewing Code Reviewers are responsible for thoroughly examining the code changes. Check for adherence to coding standards, best practices, and project guidelines. Providing Constructive Feedback Reviewers must provide clear and constructive feedback on identified issues or improvements. Discussions within the pull request are encouraged to ensure a shared understanding.","title":"Code Review Process"},{"location":"dev-guide/code-review-requirements/#requirements","text":"Review fewer than 400 lines of code at a time. Take your time. Inspection rates should under 500 LOC per hour. Do not review for more than 60 minutes at a time. Set goals and capture metrics. Authors should annotate source code before the review. Use checklists. Establish a process for fixing defects found. Foster a positive code review culture. Embrace the subconscious implications of peer review. Practice lightweight code reviews. Code changes must receive approval from at least two team members before merging. At least one maintainer's approval is required. Critical issues raised during the review must be addressed before approval. Non-blocking feedback should be addressed in subsequent iterations. Pull requests should be kept focused on specific features or fixes. Continuous improvement in code quality is encouraged.","title":"Requirements"},{"location":"dev-guide/code-review-requirements/#self-verification-checklist","text":"Coding Standards : ensure the code follows the established coding standards. Functionality : verify that the code changes address the intended functionality or issue. Edge Cases : check for handling of edge cases and potential error scenarios. Testing : confirm that appropriate tests have been added or updated. Documentation : validate that code changes are well-documented, including inline comments and README updates. Security : assess the code for potential security vulnerabilities.","title":"Self-verification Checklist"},{"location":"dev-guide/coding-style/","text":"Coding style Explanation of the used coding style. The LPVS project uses the Google Java Style . Each Pull Request is checked for compliance with the coding style. If a conflict occurs, a recommendation can be found in the Check Java Format action . Example: diff --git a/src/main/java/com/lpvs/service/LPVSDetectService.java b/src/main/java/com/lpvs/service/LPVSDetectService.java index 360e21a..880dd2a 100644 --- a/src/main/java/com/lpvs/service/LPVSDetectService.java +++ b/src/main/java/com/lpvs/service/LPVSDetectService.java @@ -84,7 +84,9 @@ public class LPVSDetectService { this.getInternalQueueByPullRequest ( HtmlUtils.htmlEscape ( trigger )) ; List<LPVSFile> scanResult = - this.runScan ( webhookConfig, LPVSDetectService.getPathByPullRequest ( webhookConfig )) ; + this.runScan ( + webhookConfig, + LPVSDetectService.getPathByPullRequest ( webhookConfig )) ; List<LPVSLicenseService.Conflict<String, String>> detectedConflicts = licenseService.findConflicts ( webhookConfig, scanResult ) ; Error: Process completed with exit code 1 . When preparing a Pull Request, you can run a command that will check and correct the coding style. java -jar google-java-format-1.23.0-all-deps.jar --aosp --skip-javadoc-formatting --skip-reflowing-long-strings --skip-sorting-imports --replace -i $( git ls-files | grep \\. java$ ) Note Download google-java-format-1.23.0-all-deps.jar here . Info google-java-format official repository link .","title":"Coding style"},{"location":"dev-guide/coding-style/#coding-style","text":"Explanation of the used coding style. The LPVS project uses the Google Java Style . Each Pull Request is checked for compliance with the coding style. If a conflict occurs, a recommendation can be found in the Check Java Format action . Example: diff --git a/src/main/java/com/lpvs/service/LPVSDetectService.java b/src/main/java/com/lpvs/service/LPVSDetectService.java index 360e21a..880dd2a 100644 --- a/src/main/java/com/lpvs/service/LPVSDetectService.java +++ b/src/main/java/com/lpvs/service/LPVSDetectService.java @@ -84,7 +84,9 @@ public class LPVSDetectService { this.getInternalQueueByPullRequest ( HtmlUtils.htmlEscape ( trigger )) ; List<LPVSFile> scanResult = - this.runScan ( webhookConfig, LPVSDetectService.getPathByPullRequest ( webhookConfig )) ; + this.runScan ( + webhookConfig, + LPVSDetectService.getPathByPullRequest ( webhookConfig )) ; List<LPVSLicenseService.Conflict<String, String>> detectedConflicts = licenseService.findConflicts ( webhookConfig, scanResult ) ; Error: Process completed with exit code 1 . When preparing a Pull Request, you can run a command that will check and correct the coding style. java -jar google-java-format-1.23.0-all-deps.jar --aosp --skip-javadoc-formatting --skip-reflowing-long-strings --skip-sorting-imports --replace -i $( git ls-files | grep \\. java$ ) Note Download google-java-format-1.23.0-all-deps.jar here . Info google-java-format official repository link .","title":"Coding style"},{"location":"dev-guide/contributing/","text":"Contributing An introduction to contributing to the LPVS project. We welcome contributions! By contributing, you can help improve this project and make it better for everyone. Ways to Contribute Here are some ways you can contribute to this project: Report Bugs & Request Features \ud83d\udc1b\ud83d\udca1: Let us know if you find any bugs or have ideas for new features by creating an issue . Vulnerability Reporting \ud83d\udea8: If you discover a vulnerability in our project, please report it according to the Security guideline . Code Contributions \ud83d\udee0\ufe0f: Fix bugs, add new features, or improve the existing code. Documentation \ud83d\udcdd: Improve our documentation by correcting typos, clarifying instructions, or adding new content. Code Reviews \ud83d\udd0d: Review other contributors' pull requests to maintain code quality. Code Contribution If you want to contribute to the LPVS project and make it better, your help is very welcome. Contributing is also a great way to learn more about social coding on GitHub, new technologies, and how to make constructive bug reports, feature requests, and the noblest of all contributions: a good, clean pull request. Note You can use templates to create a description of your pull request or issue, which will greatly simplify the LPVS team's work on reviewing and incorporating your code. However, using these templates is not mandatory, and we will always welcome any help. To make a clean pull request, follow the steps below: Fork the LPVS repository on GitHub and clone your fork to your development environment. git clone https://github.com/YOUR-GITHUB-USERNAME/LPVS.git Warning If you have trouble setting up Git with GitHub in Linux or are getting errors like Permission Denied (publickey) , you must set up your Git installation to work with GitHub . Add the main LPVS repository as an additional Git remote called upstream . git remote add upstream https://github.com/samsung/lpvs Make sure there is an issue created for the task you are working on. All new features and bug fixes should have an associated issue to provide a single point of reference for discussion and documentation. If the issue already exists, leave a comment on that issue indicating that you intend to work on it. If it doesn't exist, open a new issue for your task. Note For small changes or documentation issues, creating an issue is not necessary, and a pull request is sufficient. Fetch the latest code from the main LPVS branch. git fetch upstream Warning You should start at this point for every new contribution to make sure you are working on the latest code. Create a new branch for your feature based on the current LPVS main branch. Each separate bug fix or feature addition should have its own branch. Branch names should be descriptive and start with the number of the corresponding issue, if applicable. If you're not fixing a specific issue, you can skip the number. git checkout upstream/<NAMED_RELEASE> git checkout -b 999 -name-of-your-branch-goes-here Info Above, can be '1.0.0', etc. - see the list of releases or main branch. Write your code and make the necessary changes. Follow the coding conventions and style guidelines used in the LPVS project. Write clear, concise, and well-documented code. Include unit tests to ensure the correctness of your code. If you're adding a new feature, consider updating the relevant documentation and examples. If you're fixing a bug, provide a clear explanation of the issue and how your code resolves it. Commit your changes with a descriptive commit message. Make sure to mention the issue number with #XXX so that GitHub will automatically link your commit with the issue. Additionally, use appropriate commit message prefixes to categorize your changes. feat : Introduce a new feature or enhancement. fix : Address a bug or resolve an issue. chore : Perform routine tasks or maintenance. docs : Make changes to documentation. style : Implement code style changes (e.g., formatting). test : Modify or add tests. refactor : Implement code refactoring. perf : Performance Improvements. build : Any changes in build conditions. ci : Implement any continuous integration changes. revert : Revert to previous code state. For example: git add path/to/my/file git commit -m \"feat: A brief description of this new feature which resolves #42\" --signoff git commit -m \"fix: A brief description of this bug fix which fixes #42\" --signoff git commit -m \"chore: A brief description of routine tasks or maintenance\" --signoff git commit -m \"docs: A brief description of documentation changes\" --signoff git commit -m \"style: A brief description of code style changes (e.g., formatting)\" --signoff git commit -m \"test: A brief description of changes related to testing\" --signoff git commit -m \"refactor: A brief description of code refactoring\" --signoff git commit -m \"perf: A brief description of performance improvements\" --signoff git commit -m \"build: A brief description of build conditions\" --signoff git commit -m \"ci: A brief description of continuous integration changes\" --signoff git commit -m \"revert: A brief description of revert previous code state\" --signoff Pull the latest LPVS code from upstream into your branch. git rebase upstream/main Push your code to your forked repository. git push -u origin my-feature Note -u parameter ensures that your branch will now automatically push and pull from the GitHub branch. That means if you type git push next time, it will know where to push to. Open a pull request against the upstream repository. Go to your repository on GitHub and click Pull Request . Choose your branch on the right and enter some more details in the comment box. To link the pull request to the issue, include #999 in the pull request comment, where 999 is the issue number. Info Each pull-request should fix a single change. Someone from the LPVS team will review your code, and you might be asked to make some changes. If requested, make the necessary changes and push them to your branch. The pull request will be updated automatically. Once your code is accepted, it will be merged into the main branch and become part of the next LPVS release. If your code is not accepted, don't be discouraged. LPVS aims to meet specific requirements and priorities, and your contribution will still be available on GitHub as a reference for others. After your contribution is merged or declined, you can delete the branch you've worked on from your local repository and your forked repository: git checkout main git branch -D my-feature git push origin --delete my-feature Code of Conduct Everyone interacting in the LPVS project's codebases and issue trackers is expected to follow the Code of Conduct .","title":"Contributing guide"},{"location":"dev-guide/contributing/#contributing","text":"An introduction to contributing to the LPVS project. We welcome contributions! By contributing, you can help improve this project and make it better for everyone.","title":"Contributing"},{"location":"dev-guide/contributing/#ways-to-contribute","text":"Here are some ways you can contribute to this project: Report Bugs & Request Features \ud83d\udc1b\ud83d\udca1: Let us know if you find any bugs or have ideas for new features by creating an issue . Vulnerability Reporting \ud83d\udea8: If you discover a vulnerability in our project, please report it according to the Security guideline . Code Contributions \ud83d\udee0\ufe0f: Fix bugs, add new features, or improve the existing code. Documentation \ud83d\udcdd: Improve our documentation by correcting typos, clarifying instructions, or adding new content. Code Reviews \ud83d\udd0d: Review other contributors' pull requests to maintain code quality.","title":"Ways to Contribute"},{"location":"dev-guide/contributing/#code-contribution","text":"If you want to contribute to the LPVS project and make it better, your help is very welcome. Contributing is also a great way to learn more about social coding on GitHub, new technologies, and how to make constructive bug reports, feature requests, and the noblest of all contributions: a good, clean pull request. Note You can use templates to create a description of your pull request or issue, which will greatly simplify the LPVS team's work on reviewing and incorporating your code. However, using these templates is not mandatory, and we will always welcome any help. To make a clean pull request, follow the steps below: Fork the LPVS repository on GitHub and clone your fork to your development environment. git clone https://github.com/YOUR-GITHUB-USERNAME/LPVS.git Warning If you have trouble setting up Git with GitHub in Linux or are getting errors like Permission Denied (publickey) , you must set up your Git installation to work with GitHub . Add the main LPVS repository as an additional Git remote called upstream . git remote add upstream https://github.com/samsung/lpvs Make sure there is an issue created for the task you are working on. All new features and bug fixes should have an associated issue to provide a single point of reference for discussion and documentation. If the issue already exists, leave a comment on that issue indicating that you intend to work on it. If it doesn't exist, open a new issue for your task. Note For small changes or documentation issues, creating an issue is not necessary, and a pull request is sufficient. Fetch the latest code from the main LPVS branch. git fetch upstream Warning You should start at this point for every new contribution to make sure you are working on the latest code. Create a new branch for your feature based on the current LPVS main branch. Each separate bug fix or feature addition should have its own branch. Branch names should be descriptive and start with the number of the corresponding issue, if applicable. If you're not fixing a specific issue, you can skip the number. git checkout upstream/<NAMED_RELEASE> git checkout -b 999 -name-of-your-branch-goes-here Info Above, can be '1.0.0', etc. - see the list of releases or main branch. Write your code and make the necessary changes. Follow the coding conventions and style guidelines used in the LPVS project. Write clear, concise, and well-documented code. Include unit tests to ensure the correctness of your code. If you're adding a new feature, consider updating the relevant documentation and examples. If you're fixing a bug, provide a clear explanation of the issue and how your code resolves it. Commit your changes with a descriptive commit message. Make sure to mention the issue number with #XXX so that GitHub will automatically link your commit with the issue. Additionally, use appropriate commit message prefixes to categorize your changes. feat : Introduce a new feature or enhancement. fix : Address a bug or resolve an issue. chore : Perform routine tasks or maintenance. docs : Make changes to documentation. style : Implement code style changes (e.g., formatting). test : Modify or add tests. refactor : Implement code refactoring. perf : Performance Improvements. build : Any changes in build conditions. ci : Implement any continuous integration changes. revert : Revert to previous code state. For example: git add path/to/my/file git commit -m \"feat: A brief description of this new feature which resolves #42\" --signoff git commit -m \"fix: A brief description of this bug fix which fixes #42\" --signoff git commit -m \"chore: A brief description of routine tasks or maintenance\" --signoff git commit -m \"docs: A brief description of documentation changes\" --signoff git commit -m \"style: A brief description of code style changes (e.g., formatting)\" --signoff git commit -m \"test: A brief description of changes related to testing\" --signoff git commit -m \"refactor: A brief description of code refactoring\" --signoff git commit -m \"perf: A brief description of performance improvements\" --signoff git commit -m \"build: A brief description of build conditions\" --signoff git commit -m \"ci: A brief description of continuous integration changes\" --signoff git commit -m \"revert: A brief description of revert previous code state\" --signoff Pull the latest LPVS code from upstream into your branch. git rebase upstream/main Push your code to your forked repository. git push -u origin my-feature Note -u parameter ensures that your branch will now automatically push and pull from the GitHub branch. That means if you type git push next time, it will know where to push to. Open a pull request against the upstream repository. Go to your repository on GitHub and click Pull Request . Choose your branch on the right and enter some more details in the comment box. To link the pull request to the issue, include #999 in the pull request comment, where 999 is the issue number. Info Each pull-request should fix a single change. Someone from the LPVS team will review your code, and you might be asked to make some changes. If requested, make the necessary changes and push them to your branch. The pull request will be updated automatically. Once your code is accepted, it will be merged into the main branch and become part of the next LPVS release. If your code is not accepted, don't be discouraged. LPVS aims to meet specific requirements and priorities, and your contribution will still be available on GitHub as a reference for others. After your contribution is merged or declined, you can delete the branch you've worked on from your local repository and your forked repository: git checkout main git branch -D my-feature git push origin --delete my-feature","title":"Code Contribution"},{"location":"dev-guide/contributing/#code-of-conduct","text":"Everyone interacting in the LPVS project's codebases and issue trackers is expected to follow the Code of Conduct .","title":"Code of Conduct"},{"location":"dev-guide/faq/","text":"FAQ Frequently asked questions and useful information. Useful utilities Swagger Swagger Swagger Editor PlantUML PlantUML Language Reference Guide PlantText - Online Editor How to sign a release using GPG? A good example of a release signature can be found on the link . However, 5 and 6 items are described separately. Creating a key pair gpg --full-generate-key During the execution of this command, you will need to enter additional data: Please select what kind of key you want: 1 What keysize do you want? (3072): 4096 Please specify how long the key should be valid: 0 Key is valid for? (0): 0 Is this correct? (y/N): y Real name: LPVS Email address: john.doe@example.com Comment: Keys for LPVS In this case, the result will be the next gpg ( GnuPG ) 2 .2.4 ; Copyright ( C ) 2017 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: ( 1 ) RSA and RSA ( default ) ( 2 ) DSA and Elgamal ( 3 ) DSA ( sign only ) ( 4 ) RSA ( sign only ) Your selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? ( 3072 ) 4096 Requested keysize is 4096 bits Please specify how long the key should be valid. 0 = key does not expire <n> = key expires in n days <n>w = key expires in n weeks <n>m = key expires in n months <n>y = key expires in n years Key is valid for ? ( 0 ) 0 Key does not expire at all Is this correct? ( y/N ) y GnuPG needs to construct a user ID to identify your key. Real name: LPVS Email address: john.doe@example.com Comment: Keys for LPVS You selected this USER-ID: \"LPVS (Keys for LPVS) <john.doe@example.com>\" Change ( N ) ame, ( C ) omment, ( E ) mail or ( O ) kay/ ( Q ) uit? O We need to generate a lot of random bytes. It is a good idea to perform some other action ( type on the keyboard, move the mouse, utilize the disks ) during the prime generation ; this gives the random number generator a better chance to gain enough entropy. We need to generate a lot of random bytes. It is a good idea to perform some other action ( type on the keyboard, move the mouse, utilize the disks ) during the prime generation ; this gives the random number generator a better chance to gain enough entropy. gpg: key BE13B1D440E813F0 marked as ultimately trusted gpg: revocation certificate stored as '/home/virtual-pc/.gnupg/openpgp-revocs.d/D3C7C06AC34BDA9A41388E76BE13B1D440E813F0.rev' public and secret key created and signed. pub rsa4096 2021 -10-15 [ SC ] D3C7C06AC34BDA9A41388E76BE13B1D440E813F0 uid LPVS ( Keys for LPVS ) <john.doe@example.com> sub rsa4096 2021 -10-15 [ E ] Create and sign a tag with your created key Set your GPG signing key in Git git config --global user.signingkey <key-ID> Create and sign the tag git tag -s <tag> Sign the release tarball with your created key gpg --armor --detach-sign lpvs-vx.x.x.tar.gz Note If you have multiple keys, you must specify the key that will be used by adding the option -u <key-ID> Extraction a copy of a key pair from local gpg keyring gpg --output lpvs-public.pgp --armor --export john.doe@example.com gpg --output lpvs-private.pgp --armor --export-secret-key john.doe@example.com Note Only the signature file ( lpvs-vx.x.x.tar.gz.asc ) and the public key ( lpvs-public.pgp ) must be loaded as an artifact to release. To sign the release using another computer For this need to download the private key ( lpvs-private.pgp ) by the next command: gpg --import lpvs-private.pgp How to use GPG to verify signed release? To perform the verification, you need the following: * signed file \u2013 for example lpvs-vx.x.x.tar.gz * signature file \u2013 accompanying file with \u201c.asc\u201d extension (Ex. lpvs-vx.x.x.tar.gz.asc ) * public key \u2013 for example lpvs-public.pgp Import the public key to your keystore gpg --import <public key> Verification signed file gpg --verify <signature file> <signed file> Note If you have multiple keys, you must specify the key that will be used by adding the option -u <key-ID> DCO via the command line The most popular way to do DCO is to sign off your username and email address in the git command line. First, configure your local git install. $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com Obviously, you should use your own name and the email address associated with your GitHub user account. Now, every time you commit new code in git, just add a signoff statement via the -s flag. $ git commit -s -m \"This is my commit message\" That\u2019s it. Git adds your sign-off message in the commit message, and you contribution (commit) is now DCO compliant. How to generate Python requirements file with hashes? To generate a Python requirements.txt file with hashes, which ensures that the same versions of packages are installed across different environments, you can use the pip-compile tool from the pip-tools package. Here's a step-by-step guide on how to achieve this: Steps: Install pip-tools First, install pip-tools to manage your requirements.txt and add hashes. pip install pip-tools Create requirements.in file: Add your packages to a requirements.in file. This file will be used as input to generate the final requirements.txt file with hashes. In case you need to use exact version of a package, you can specify it in this file. Example requirements.in : mkdocs==1.6.1 pymdown-extensions==10.9 Compile the requirements.txt with hashes Use pip-compile with --generate-hashes flag to create a requirements.txt file includes secure hashes. pip-compile --generate-hashes Note If you want to use custom names of input and output requirements file, specify them in command line like this: pip-compile --output-file = custom-requirements.txt --generate-hashes custom-requirements.in Without --output-file : It will always create requirements.txt file. With --output-file : It will specify any custom output file name. Result It will generate a requirements.txt (or custom-requirements.txt ) file with hashes for each package, ensuring the integrity and security of the installed packages. Example output in requirements.txt : mkdocs==1.6.1 \\ --hash=sha256:... \\ --hash=sha256:... ... pymdown-extensions==10.9 \\ --hash=sha256:... \\ --hash=sha256:... ...","title":"FAQ"},{"location":"dev-guide/faq/#faq","text":"Frequently asked questions and useful information.","title":"FAQ"},{"location":"dev-guide/faq/#useful-utilities","text":"","title":"Useful utilities"},{"location":"dev-guide/faq/#swagger","text":"Swagger Swagger Editor","title":"Swagger"},{"location":"dev-guide/faq/#plantuml","text":"PlantUML Language Reference Guide PlantText - Online Editor","title":"PlantUML"},{"location":"dev-guide/faq/#how-to-sign-a-release-using-gpg","text":"A good example of a release signature can be found on the link . However, 5 and 6 items are described separately.","title":"How to sign a release using GPG?"},{"location":"dev-guide/faq/#creating-a-key-pair","text":"gpg --full-generate-key During the execution of this command, you will need to enter additional data: Please select what kind of key you want: 1 What keysize do you want? (3072): 4096 Please specify how long the key should be valid: 0 Key is valid for? (0): 0 Is this correct? (y/N): y Real name: LPVS Email address: john.doe@example.com Comment: Keys for LPVS In this case, the result will be the next gpg ( GnuPG ) 2 .2.4 ; Copyright ( C ) 2017 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: ( 1 ) RSA and RSA ( default ) ( 2 ) DSA and Elgamal ( 3 ) DSA ( sign only ) ( 4 ) RSA ( sign only ) Your selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? ( 3072 ) 4096 Requested keysize is 4096 bits Please specify how long the key should be valid. 0 = key does not expire <n> = key expires in n days <n>w = key expires in n weeks <n>m = key expires in n months <n>y = key expires in n years Key is valid for ? ( 0 ) 0 Key does not expire at all Is this correct? ( y/N ) y GnuPG needs to construct a user ID to identify your key. Real name: LPVS Email address: john.doe@example.com Comment: Keys for LPVS You selected this USER-ID: \"LPVS (Keys for LPVS) <john.doe@example.com>\" Change ( N ) ame, ( C ) omment, ( E ) mail or ( O ) kay/ ( Q ) uit? O We need to generate a lot of random bytes. It is a good idea to perform some other action ( type on the keyboard, move the mouse, utilize the disks ) during the prime generation ; this gives the random number generator a better chance to gain enough entropy. We need to generate a lot of random bytes. It is a good idea to perform some other action ( type on the keyboard, move the mouse, utilize the disks ) during the prime generation ; this gives the random number generator a better chance to gain enough entropy. gpg: key BE13B1D440E813F0 marked as ultimately trusted gpg: revocation certificate stored as '/home/virtual-pc/.gnupg/openpgp-revocs.d/D3C7C06AC34BDA9A41388E76BE13B1D440E813F0.rev' public and secret key created and signed. pub rsa4096 2021 -10-15 [ SC ] D3C7C06AC34BDA9A41388E76BE13B1D440E813F0 uid LPVS ( Keys for LPVS ) <john.doe@example.com> sub rsa4096 2021 -10-15 [ E ]","title":"Creating a key pair"},{"location":"dev-guide/faq/#create-and-sign-a-tag-with-your-created-key","text":"Set your GPG signing key in Git git config --global user.signingkey <key-ID> Create and sign the tag git tag -s <tag>","title":"Create and sign a tag with your created key"},{"location":"dev-guide/faq/#sign-the-release-tarball-with-your-created-key","text":"gpg --armor --detach-sign lpvs-vx.x.x.tar.gz Note If you have multiple keys, you must specify the key that will be used by adding the option -u <key-ID>","title":"Sign the release tarball with your created key"},{"location":"dev-guide/faq/#extraction-a-copy-of-a-key-pair-from-local-gpg-keyring","text":"gpg --output lpvs-public.pgp --armor --export john.doe@example.com gpg --output lpvs-private.pgp --armor --export-secret-key john.doe@example.com Note Only the signature file ( lpvs-vx.x.x.tar.gz.asc ) and the public key ( lpvs-public.pgp ) must be loaded as an artifact to release.","title":"Extraction a copy of a key pair from local gpg keyring"},{"location":"dev-guide/faq/#to-sign-the-release-using-another-computer","text":"For this need to download the private key ( lpvs-private.pgp ) by the next command: gpg --import lpvs-private.pgp","title":"To sign the release using another computer"},{"location":"dev-guide/faq/#how-to-use-gpg-to-verify-signed-release","text":"To perform the verification, you need the following: * signed file \u2013 for example lpvs-vx.x.x.tar.gz * signature file \u2013 accompanying file with \u201c.asc\u201d extension (Ex. lpvs-vx.x.x.tar.gz.asc ) * public key \u2013 for example lpvs-public.pgp","title":"How to use GPG to verify signed release?"},{"location":"dev-guide/faq/#import-the-public-key-to-your-keystore","text":"gpg --import <public key>","title":"Import the public key to your keystore"},{"location":"dev-guide/faq/#verification-signed-file","text":"gpg --verify <signature file> <signed file> Note If you have multiple keys, you must specify the key that will be used by adding the option -u <key-ID>","title":"Verification signed file"},{"location":"dev-guide/faq/#dco-via-the-command-line","text":"The most popular way to do DCO is to sign off your username and email address in the git command line. First, configure your local git install. $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com Obviously, you should use your own name and the email address associated with your GitHub user account. Now, every time you commit new code in git, just add a signoff statement via the -s flag. $ git commit -s -m \"This is my commit message\" That\u2019s it. Git adds your sign-off message in the commit message, and you contribution (commit) is now DCO compliant.","title":"DCO via the command line"},{"location":"dev-guide/faq/#how-to-generate-python-requirements-file-with-hashes","text":"To generate a Python requirements.txt file with hashes, which ensures that the same versions of packages are installed across different environments, you can use the pip-compile tool from the pip-tools package. Here's a step-by-step guide on how to achieve this:","title":"How to generate Python requirements file with hashes?"},{"location":"dev-guide/faq/#steps","text":"Install pip-tools First, install pip-tools to manage your requirements.txt and add hashes. pip install pip-tools Create requirements.in file: Add your packages to a requirements.in file. This file will be used as input to generate the final requirements.txt file with hashes. In case you need to use exact version of a package, you can specify it in this file. Example requirements.in : mkdocs==1.6.1 pymdown-extensions==10.9 Compile the requirements.txt with hashes Use pip-compile with --generate-hashes flag to create a requirements.txt file includes secure hashes. pip-compile --generate-hashes Note If you want to use custom names of input and output requirements file, specify them in command line like this: pip-compile --output-file = custom-requirements.txt --generate-hashes custom-requirements.in Without --output-file : It will always create requirements.txt file. With --output-file : It will specify any custom output file name. Result It will generate a requirements.txt (or custom-requirements.txt ) file with hashes for each package, ensuring the integrity and security of the installed packages. Example output in requirements.txt : mkdocs==1.6.1 \\ --hash=sha256:... \\ --hash=sha256:... ... pymdown-extensions==10.9 \\ --hash=sha256:... \\ --hash=sha256:... ...","title":"Steps:"},{"location":"dev-guide/integration/","text":"Integration guide Use of LPVS JAR in your project Authenticating with a personal access token You can authenticate to GitHub Packages with Apache Maven by editing your ~/.m2/settings.xml file to include your personal access token. Info Create a token with minimally sufficient rights: Fine-grained tokens (recommended) Only select repositories -> Permissions -> Repository permissions -> Metadata -> Read-only Tokens (classic) Select scopes -> read:packages Create a new ~/.m2/settings.xml file if one doesn't exist. Example settings.xml : <settings xmlns= \"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\" > <activeProfiles> <activeProfile> github </activeProfile> </activeProfiles> <profiles> <profile> <id> github </id> <repositories> <repository> <id> github </id> <url> https://maven.pkg.github.com/samsung/lpvs </url> <snapshots> <enabled> true </enabled> </snapshots> </repository> </repositories> </profile> </profiles> <servers> <server> <id> github </id> <username> USERNAME </username> <password> TOKEN </password> </server> </servers> </settings> Note If your settings.xml file is not located in ~/.m2/settings.xml , then you need to add the -s path/to/file/settings.xml option to mvn command Installing a package Edit the <dependencies> element of the pom.xml file located in your project directory. <dependencies> <dependency> <groupId> com.lpvs </groupId> <artifactId> lpvs </artifactId> <version> x.y.z </version> </dependency> </dependencies>","title":"Integration guide"},{"location":"dev-guide/integration/#integration-guide","text":"Use of LPVS JAR in your project","title":"Integration guide"},{"location":"dev-guide/integration/#authenticating-with-a-personal-access-token","text":"You can authenticate to GitHub Packages with Apache Maven by editing your ~/.m2/settings.xml file to include your personal access token. Info Create a token with minimally sufficient rights: Fine-grained tokens (recommended) Only select repositories -> Permissions -> Repository permissions -> Metadata -> Read-only Tokens (classic) Select scopes -> read:packages Create a new ~/.m2/settings.xml file if one doesn't exist. Example settings.xml : <settings xmlns= \"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\" > <activeProfiles> <activeProfile> github </activeProfile> </activeProfiles> <profiles> <profile> <id> github </id> <repositories> <repository> <id> github </id> <url> https://maven.pkg.github.com/samsung/lpvs </url> <snapshots> <enabled> true </enabled> </snapshots> </repository> </repositories> </profile> </profiles> <servers> <server> <id> github </id> <username> USERNAME </username> <password> TOKEN </password> </server> </servers> </settings> Note If your settings.xml file is not located in ~/.m2/settings.xml , then you need to add the -s path/to/file/settings.xml option to mvn command","title":"Authenticating with a personal access token"},{"location":"dev-guide/integration/#installing-a-package","text":"Edit the <dependencies> element of the pom.xml file located in your project directory. <dependencies> <dependency> <groupId> com.lpvs </groupId> <artifactId> lpvs </artifactId> <version> x.y.z </version> </dependency> </dependencies>","title":"Installing a package"},{"location":"dev-guide/testing-policy/","text":"Testing policy How to check verify correct work of LPVS. Introduction Testing is a very important part of LPVS project and our team values it highly. When adding or changing functionality, the main requirement is to include new tests as part of your contribution. Note If your contribution does not have the required tests, please mark this in the PR and our team will support to develop them. The LPVS team strives to maintain test coverage of at least 70% . We ask you to help us keep this minimum. Additional tests are very welcome. The LPVS team strongly recommends adhering to the Test-driven development (TDD) as a software development process. How to start Test Suite (Local) To build and testing all packages: mvn -B package -Pcoverage --file pom.xml To start testing all packages: mvn test Automated Run Test Suite (Remote) Code testing occurs remotely using an Actions -> Workflow Test-suite during each push or pull_request . Info Find more information on GitHub Actions documentation","title":"Testing policy"},{"location":"dev-guide/testing-policy/#testing-policy","text":"How to check verify correct work of LPVS.","title":"Testing policy"},{"location":"dev-guide/testing-policy/#introduction","text":"Testing is a very important part of LPVS project and our team values it highly. When adding or changing functionality, the main requirement is to include new tests as part of your contribution. Note If your contribution does not have the required tests, please mark this in the PR and our team will support to develop them. The LPVS team strives to maintain test coverage of at least 70% . We ask you to help us keep this minimum. Additional tests are very welcome. The LPVS team strongly recommends adhering to the Test-driven development (TDD) as a software development process.","title":"Introduction"},{"location":"dev-guide/testing-policy/#how-to-start-test-suite-local","text":"To build and testing all packages: mvn -B package -Pcoverage --file pom.xml To start testing all packages: mvn test","title":"How to start Test Suite (Local)"},{"location":"dev-guide/testing-policy/#automated-run-test-suite-remote","text":"Code testing occurs remotely using an Actions -> Workflow Test-suite during each push or pull_request . Info Find more information on GitHub Actions documentation","title":"Automated Run Test Suite (Remote)"},{"location":"user-guide/","text":"User Guide How to configure and run LPVS. The LPVS User Guide provides documentation for users on how to configure and run LPVS. You can jump directly to the pages listed below, or use the next and previous buttons in the navigation bar at the top of the page to move through the documentation in order. There are 2 modes of LPVS operation: - Service mode - LPVS works as a service that is started by the system and runs continuously. - Command line mode - LPVS is executed from the command line and runs until it completes its task. Service mode GitHub webhook configuration Run service using pre-built Docker image Scanner installation Database configuration Build and run service from the source code Command line mode Single scan of the pull request Single scan of local files Configuration Configuration options Database customization Performance monitoring Tools","title":"User guide"},{"location":"user-guide/#user-guide","text":"How to configure and run LPVS. The LPVS User Guide provides documentation for users on how to configure and run LPVS. You can jump directly to the pages listed below, or use the next and previous buttons in the navigation bar at the top of the page to move through the documentation in order. There are 2 modes of LPVS operation: - Service mode - LPVS works as a service that is started by the system and runs continuously. - Command line mode - LPVS is executed from the command line and runs until it completes its task.","title":"User Guide"},{"location":"user-guide/#service-mode","text":"GitHub webhook configuration Run service using pre-built Docker image Scanner installation Database configuration Build and run service from the source code","title":"Service mode"},{"location":"user-guide/#command-line-mode","text":"Single scan of the pull request Single scan of local files","title":"Command line mode"},{"location":"user-guide/#configuration","text":"Configuration options Database customization","title":"Configuration"},{"location":"user-guide/#performance-monitoring","text":"Tools","title":"Performance monitoring"},{"location":"user-guide/performance/","text":"Performance monitoring Tools that can be used for performance monitoring. Introduction There are various performance monitoring tools available for different programming languages, including Java. Some tools offer multi-language support, allowing users to monitor applications written in multiple languages. These tools are designed to assist in analyzing and optimizing application performance by providing insights into memory utilization, thread execution, and method execution. By utilizing these tools, developers can effectively identify and address performance bottlenecks, enhance CPU performance, and detect potential memory leaks. Although numerous performance monitoring tools exist for Java , they vary greatly in terms of size, functionality, and how seamlessly they integrate with the primary application. For instance, three such tools are Glowroot, VisualVM, and JConsole, which were selected based on their relatively small sizes, ease of deployment, and open-source nature: Glowroot VisualVM JConsole Description and instructions for the tools Below given very brief instructions for using the tools -more detailed instructions may be found on sites of the applications, GitHub repositories and even by search in browser. Glowroot Glowroot is a lightweight and fast tool that provides real-time performance monitoring for Java applications. Known for its user-friendly interface and ability to track metrics such as transaction traces, thread dumps, and JVM statistics, Glowroot is a popular choice among developers. Glowroot website . Glowroot repository . Licensed under the Apache-2.0 for code and CC-BY-3.0 for documentation. How to use Download the latest version of Glowroot from the GitHub release page or use the download link provided on the website. Unzip the downloaded file glowroot-x.xx.x-dist.zip . Add the following line to your application's JVM arguments: -javaagent:path/to/glowroot.jar . Example: java -javaagent:path/to/glowroot.jar -jar lpvs-*.jar Access the Glowroot dashboard in your browser at http://localhost:4000. VisualVM VisualVM is another built-in tool that provides a more advanced graphical interface for monitoring and managing Java applications. It offers features like profiling, thread dumps, and heap analysis. VisualVM website . VisualVM repository . Licensed under GNU General Public License, version 2, with the Classpath Exception . How to use Download the latest version of VisualVM from the GitHub release page or use the download link provided on the website . Unzip the downloaded file visualvm_xxx.zip . Navigate to the unzipped directory and run the executable file located in the bin/ directory. Start the LPVS application and select it for monitoring in VisualVM. After initiating monitoring, explore the different metrics available in the VisualVM menu. Note If you encounter an error related to missing libraries when using openjdk-xx, you can try resolving it by running the following command: sudo apt install openjdk-xx-jdk --fix-missing Additionally, there are over 20 plugins currently available for VisualVM, enabling you to add new monitoring metrics to further enhance your analysis. JConsole JConsole is a built-in tool that accompanies the Java Virtual Machine (JVM) and adheres to the Java Management Extensions (JMX) specification. It offers a convenient graphical user interface for monitoring and managing your Java applications. As it is a standard component of JDK, there is no need for separate installation. However, for utilizing Open Source software under JDK, we recommend considering OpenJDK. JConsole website . Licensed under the GNU General Public License, version 2, with a linking exception. How to use Start the JConsole tool by entering the following command in the terminal: jconsole Launch the LPVS application and select it for monitoring in JConsole. Once monitoring has started, you can navigate through the different menus and explore various metrics to analyze the performance of the application. Note If you encounter an error during startup stating \"Failed to load module 'canberra-gtk-module'\", it might be resolved by installing missing modules: sudo apt install libcanberra-gtk-module libcanberra-gtk3-module","title":"Performance monitoring"},{"location":"user-guide/performance/#performance-monitoring","text":"Tools that can be used for performance monitoring.","title":"Performance monitoring"},{"location":"user-guide/performance/#introduction","text":"There are various performance monitoring tools available for different programming languages, including Java. Some tools offer multi-language support, allowing users to monitor applications written in multiple languages. These tools are designed to assist in analyzing and optimizing application performance by providing insights into memory utilization, thread execution, and method execution. By utilizing these tools, developers can effectively identify and address performance bottlenecks, enhance CPU performance, and detect potential memory leaks. Although numerous performance monitoring tools exist for Java , they vary greatly in terms of size, functionality, and how seamlessly they integrate with the primary application. For instance, three such tools are Glowroot, VisualVM, and JConsole, which were selected based on their relatively small sizes, ease of deployment, and open-source nature: Glowroot VisualVM JConsole","title":"Introduction"},{"location":"user-guide/performance/#description-and-instructions-for-the-tools","text":"Below given very brief instructions for using the tools -more detailed instructions may be found on sites of the applications, GitHub repositories and even by search in browser.","title":"Description and instructions for the tools"},{"location":"user-guide/performance/#glowroot","text":"Glowroot is a lightweight and fast tool that provides real-time performance monitoring for Java applications. Known for its user-friendly interface and ability to track metrics such as transaction traces, thread dumps, and JVM statistics, Glowroot is a popular choice among developers. Glowroot website . Glowroot repository . Licensed under the Apache-2.0 for code and CC-BY-3.0 for documentation.","title":"Glowroot"},{"location":"user-guide/performance/#how-to-use","text":"Download the latest version of Glowroot from the GitHub release page or use the download link provided on the website. Unzip the downloaded file glowroot-x.xx.x-dist.zip . Add the following line to your application's JVM arguments: -javaagent:path/to/glowroot.jar . Example: java -javaagent:path/to/glowroot.jar -jar lpvs-*.jar Access the Glowroot dashboard in your browser at http://localhost:4000.","title":"How to use"},{"location":"user-guide/performance/#visualvm","text":"VisualVM is another built-in tool that provides a more advanced graphical interface for monitoring and managing Java applications. It offers features like profiling, thread dumps, and heap analysis. VisualVM website . VisualVM repository . Licensed under GNU General Public License, version 2, with the Classpath Exception .","title":"VisualVM"},{"location":"user-guide/performance/#how-to-use_1","text":"Download the latest version of VisualVM from the GitHub release page or use the download link provided on the website . Unzip the downloaded file visualvm_xxx.zip . Navigate to the unzipped directory and run the executable file located in the bin/ directory. Start the LPVS application and select it for monitoring in VisualVM. After initiating monitoring, explore the different metrics available in the VisualVM menu. Note If you encounter an error related to missing libraries when using openjdk-xx, you can try resolving it by running the following command: sudo apt install openjdk-xx-jdk --fix-missing Additionally, there are over 20 plugins currently available for VisualVM, enabling you to add new monitoring metrics to further enhance your analysis.","title":"How to use"},{"location":"user-guide/performance/#jconsole","text":"JConsole is a built-in tool that accompanies the Java Virtual Machine (JVM) and adheres to the Java Management Extensions (JMX) specification. It offers a convenient graphical user interface for monitoring and managing your Java applications. As it is a standard component of JDK, there is no need for separate installation. However, for utilizing Open Source software under JDK, we recommend considering OpenJDK. JConsole website . Licensed under the GNU General Public License, version 2, with a linking exception.","title":"JConsole"},{"location":"user-guide/performance/#how-to-use_2","text":"Start the JConsole tool by entering the following command in the terminal: jconsole Launch the LPVS application and select it for monitoring in JConsole. Once monitoring has started, you can navigate through the different menus and explore various metrics to analyze the performance of the application. Note If you encounter an error during startup stating \"Failed to load module 'canberra-gtk-module'\", it might be resolved by installing missing modules: sudo apt install libcanberra-gtk-module libcanberra-gtk3-module","title":"How to use"},{"location":"user-guide/cli/cli_file/","text":"Single scan of local files One-time scan on a specific local files from the command line. You can perform a one-time scan on a specific local file or folder using the single scan mode. LPVS should be compiled from the source code. Please refer to the detailed guideline . Follow the next steps: Make sure that the ScanOSS scanner is installed. If not, please follow the installation guide . Fill in all required properties in the profile file. Please refer to the profile configuration guide . Build and install LPVS, navigate to the target directory. For more details, please refer to the build instructions . mvn clean install cd target/ Choose a specific local file or folder which is a target for the scan and run the command with flag --local.path : java -jar lpvs-*.jar --local.path = </path/to/file/or/folder> Example: -jar lpvs-*.jar --local.path = test.java Note By default, the above commands require a pre-configured MySQL database . Use the \"singlescan\" profile to skip setting up a pre-configured MySQL database: java -jar -Dspring.profiles.active = singlescan lpvs-*.jar --local.path = </path/to/file/or/folder> Optionally, generate an HTML report and save it in a specified folder using flag --build.html.report . Replace path/to/your/folder with the full path to the folder where you want to save the HTML report, and your_report_filename.html with the desired filename for the report. java -jar -Dspring.profiles.active = singlescan lpvs-*.jar --local.path = </path/to/file/or/folder> --build.html.report = <your_report_filename.html> Warning Ensure that the specified folder exists before generating the HTML report. Examples of the command: java -jar -Dspring.profiles.active = singlescan lpvs-*.jar --local.path = test.c java -jar -Dspring.profiles.active = singlescan lpvs-*.jar --local.path = test_folder --build.html.report = test/report.html","title":"Single scan of local files"},{"location":"user-guide/cli/cli_file/#single-scan-of-local-files","text":"One-time scan on a specific local files from the command line. You can perform a one-time scan on a specific local file or folder using the single scan mode. LPVS should be compiled from the source code. Please refer to the detailed guideline . Follow the next steps: Make sure that the ScanOSS scanner is installed. If not, please follow the installation guide . Fill in all required properties in the profile file. Please refer to the profile configuration guide . Build and install LPVS, navigate to the target directory. For more details, please refer to the build instructions . mvn clean install cd target/ Choose a specific local file or folder which is a target for the scan and run the command with flag --local.path : java -jar lpvs-*.jar --local.path = </path/to/file/or/folder> Example: -jar lpvs-*.jar --local.path = test.java Note By default, the above commands require a pre-configured MySQL database . Use the \"singlescan\" profile to skip setting up a pre-configured MySQL database: java -jar -Dspring.profiles.active = singlescan lpvs-*.jar --local.path = </path/to/file/or/folder> Optionally, generate an HTML report and save it in a specified folder using flag --build.html.report . Replace path/to/your/folder with the full path to the folder where you want to save the HTML report, and your_report_filename.html with the desired filename for the report. java -jar -Dspring.profiles.active = singlescan lpvs-*.jar --local.path = </path/to/file/or/folder> --build.html.report = <your_report_filename.html> Warning Ensure that the specified folder exists before generating the HTML report. Examples of the command: java -jar -Dspring.profiles.active = singlescan lpvs-*.jar --local.path = test.c java -jar -Dspring.profiles.active = singlescan lpvs-*.jar --local.path = test_folder --build.html.report = test/report.html","title":"Single scan of local files"},{"location":"user-guide/cli/cli_pr/","text":"Single scan of the pull request One-time scan on a specific pull request from the command line. You can perform a one-time scan on a specific pull request using the single scan mode. LPVS should be compiled from the source code. Please refer to the detailed guideline . Follow the next steps: Make sure that the ScanOSS scanner is installed. If not, please follow the installation guide . Fill in all required properties in the profile file. Please refer to the profile configuration guide . Build and install LPVS, navigate to the target directory. For more details, please refer to the build instructions . mvn clean install cd target/ Choose a specific pull request from GitHub which is a target for the scan and run the command with flag --github.pull.request : java -jar -Dgithub.token = <my-token> lpvs-*.jar --github.pull.request = <PR URL> Example: -jar -Dgithub.token = your_personal_token lpvs-*.jar --github.pull.request = https://github.com/Samsung/LPVS/pull/594 Note By default, the above commands require a pre-configured MySQL database . Use the \"singlescan\" profile to skip setting up a pre-configured MySQL database: java -jar -Dspring.profiles.active = singlescan -Dgithub.token = <my-token> lpvs-*.jar --github.pull.request = <PR URL> Optionally, generate an HTML report and save it in a specified folder using flag --build.html.report . Replace path/to/your/folder with the full path to the folder where you want to save the HTML report, and your_report_filename.html with the desired filename for the report. java -jar -Dspring.profiles.active = singlescan -Dgithub.token = <my-token> lpvs-*.jar --github.pull.request = <PR URL> --build.html.report = </path/to/your/folder/your_report_filename.html> Warning Ensure that the specified folder exists before generating the HTML report. Examples of the command: java -jar -Dspring.profiles.active = singlescan lpvs-*.jar --github.pull.request = https://github.com/Samsung/LPVS/pull/2 java -jar -Dspring.profiles.active = singlescan lpvs-*.jar --github.pull.request = https://github.com/Samsung/LPVS/pull/2 --build.html.report = report.html","title":"Single scan of the pull request"},{"location":"user-guide/cli/cli_pr/#single-scan-of-the-pull-request","text":"One-time scan on a specific pull request from the command line. You can perform a one-time scan on a specific pull request using the single scan mode. LPVS should be compiled from the source code. Please refer to the detailed guideline . Follow the next steps: Make sure that the ScanOSS scanner is installed. If not, please follow the installation guide . Fill in all required properties in the profile file. Please refer to the profile configuration guide . Build and install LPVS, navigate to the target directory. For more details, please refer to the build instructions . mvn clean install cd target/ Choose a specific pull request from GitHub which is a target for the scan and run the command with flag --github.pull.request : java -jar -Dgithub.token = <my-token> lpvs-*.jar --github.pull.request = <PR URL> Example: -jar -Dgithub.token = your_personal_token lpvs-*.jar --github.pull.request = https://github.com/Samsung/LPVS/pull/594 Note By default, the above commands require a pre-configured MySQL database . Use the \"singlescan\" profile to skip setting up a pre-configured MySQL database: java -jar -Dspring.profiles.active = singlescan -Dgithub.token = <my-token> lpvs-*.jar --github.pull.request = <PR URL> Optionally, generate an HTML report and save it in a specified folder using flag --build.html.report . Replace path/to/your/folder with the full path to the folder where you want to save the HTML report, and your_report_filename.html with the desired filename for the report. java -jar -Dspring.profiles.active = singlescan -Dgithub.token = <my-token> lpvs-*.jar --github.pull.request = <PR URL> --build.html.report = </path/to/your/folder/your_report_filename.html> Warning Ensure that the specified folder exists before generating the HTML report. Examples of the command: java -jar -Dspring.profiles.active = singlescan lpvs-*.jar --github.pull.request = https://github.com/Samsung/LPVS/pull/2 java -jar -Dspring.profiles.active = singlescan lpvs-*.jar --github.pull.request = https://github.com/Samsung/LPVS/pull/2 --build.html.report = report.html","title":"Single scan of the pull request"},{"location":"user-guide/config/database/","text":"Database customization Customization of the database with licenses and license conflicts. The LPVS database consists of several tables. You have to pay attention to two tables: lpvs_license_list and lpvs_license_conflicts . These tables are used to store information about licenses and their conflicts respectively. Here's a brief description of each table. Table lpvs_license_list This table stores license information. CREATE TABLE IF NOT EXISTS lpvs_license_list ( id bigint NOT NULL AUTO_INCREMENT , license_usage varchar ( 255 ) DEFAULT NULL , license_name varchar ( 255 ) NOT NULL , license_spdx varchar ( 255 ) NOT NULL , license_alternative_names longtext DEFAULT NULL , PRIMARY KEY ( id ), UNIQUE ( license_spdx ) ); The meanings of each field are as follows: - id : Unique identifier which auto increments. - license_usage : Indicates the possibility to use the license in your code and could be PERMITTED , RESTRICTED , PROHIBITED , or UNREVIEWED . - license_name : Name of the license. - license_spdx : SPDX identifier of the license. - license_alternative_names : Alternative names of the license. Table lpvs_license_conflicts This table stores license conflicts information. CREATE TABLE IF NOT EXISTS lpvs_license_conflicts ( id bigint NOT NULL AUTO_INCREMENT , conflict_license_id bigint NOT NULL , repository_license_id bigint NOT NULL , PRIMARY KEY ( id ), KEY ( conflict_license_id ), KEY ( repository_license_id ), FOREIGN KEY ( conflict_license_id ) REFERENCES lpvs_license_list ( id ), FOREIGN KEY ( repository_license_id ) REFERENCES lpvs_license_list ( id ) ); The meanings of each field are as follows: - id : Unique identifier which auto increments. - conflict_license_id : ID of the conflicting license. - repository_license_id : License ID of the repository. Warning Both tables lpvs_license_list and lpvs_license_conflicts should be filled by the user manually. When a new license is detected by LPVS, it will be added to the table lpvs_license_list with license_usage status set to UNREVIEWED , indicating that it has not been reviewed yet. Info Sample MySQL dump file is located in the repository and can be used as a reference.","title":"Database customization"},{"location":"user-guide/config/database/#database-customization","text":"Customization of the database with licenses and license conflicts. The LPVS database consists of several tables. You have to pay attention to two tables: lpvs_license_list and lpvs_license_conflicts . These tables are used to store information about licenses and their conflicts respectively. Here's a brief description of each table.","title":"Database customization"},{"location":"user-guide/config/database/#table-lpvs_license_list","text":"This table stores license information. CREATE TABLE IF NOT EXISTS lpvs_license_list ( id bigint NOT NULL AUTO_INCREMENT , license_usage varchar ( 255 ) DEFAULT NULL , license_name varchar ( 255 ) NOT NULL , license_spdx varchar ( 255 ) NOT NULL , license_alternative_names longtext DEFAULT NULL , PRIMARY KEY ( id ), UNIQUE ( license_spdx ) ); The meanings of each field are as follows: - id : Unique identifier which auto increments. - license_usage : Indicates the possibility to use the license in your code and could be PERMITTED , RESTRICTED , PROHIBITED , or UNREVIEWED . - license_name : Name of the license. - license_spdx : SPDX identifier of the license. - license_alternative_names : Alternative names of the license.","title":"Table lpvs_license_list"},{"location":"user-guide/config/database/#table-lpvs_license_conflicts","text":"This table stores license conflicts information. CREATE TABLE IF NOT EXISTS lpvs_license_conflicts ( id bigint NOT NULL AUTO_INCREMENT , conflict_license_id bigint NOT NULL , repository_license_id bigint NOT NULL , PRIMARY KEY ( id ), KEY ( conflict_license_id ), KEY ( repository_license_id ), FOREIGN KEY ( conflict_license_id ) REFERENCES lpvs_license_list ( id ), FOREIGN KEY ( repository_license_id ) REFERENCES lpvs_license_list ( id ) ); The meanings of each field are as follows: - id : Unique identifier which auto increments. - conflict_license_id : ID of the conflicting license. - repository_license_id : License ID of the repository. Warning Both tables lpvs_license_list and lpvs_license_conflicts should be filled by the user manually. When a new license is detected by LPVS, it will be added to the table lpvs_license_list with license_usage status set to UNREVIEWED , indicating that it has not been reviewed yet. Info Sample MySQL dump file is located in the repository and can be used as a reference.","title":"Table lpvs_license_conflicts"},{"location":"user-guide/config/options/","text":"Configuration options Description of the meaningful properties and its possible values. Properties in the application profile files There are three profiles available in the LPVS application: application.properties : default profile which contains all main properties of the application application-singlescan.properties : profile for single scan mode application-web.properties : profile for connecting the frontend application to the backend application.properties profile debug : This setting determines whether the application runs in debug mode. If set to false, the application will run in normal execution mode. Default: false . server.port : This setting specifies the port number used by the application. Default: 7896 . scanner : This setting specifies the name of the scanning tool being used. Currently supporting ScanOSS . Default: scanoss . license_conflict : This setting specifies where the license conflict information comes from. It can be either db (from the manually filled table in database, refer to the Database guide ) or scanner (if supported by scanner). Default: db . license_source : This setting specifies the URL of the external OSORI license database. Default: https://olis.or.kr:8082 . spring.profiles.active : This setting specifies which Spring profile is active. github.* : These settings include various configurations related to GitHub such as login, token, API URL. Fill in your own values for these settings. Please refer to the Personal token creation guide for more details. github.secret : This setting specifies the secret string used for configuring webhooks. Please refer to the Webhook configuration guide for more details. Default: LPVS . lpvs.* : These settings include various configurations specific to the LPVS application like core pool size, number of scan attempts, and version. spring.jpa.properties.hibernate.default_schema : This setting specifies the default schema name that Hibernate should use. Default: lpvs . spring.datasource.* : These settings specify the data source configurations including URL, username, password, etc. Fill in your own values for these settings. application-singlescan.properties profile spring.sql.init.data-locations : This setting specifies the location of the SQL script files that will be executed when initializing the database. By default, it is set to classpath*:database_dump.sql , indicating that the default dump file named database_dump.sql should be found in any package within the classpath. spring.datasource.username : This setting specifies the username for accessing the datasource. By default, it is left blank, indicating that no username is required for authentication. spring.datasource.password : This setting specifies the password for accessing the datasource. Again, it is left blank here, indicating that no password is needed for authentication. application-web.properties profile These properties configure OAuth2 clients for different providers such as Google, Naver, and Kakao. For each provider, client ID, client secret, redirect URI, authorization grant type, scope, and other relevant details should be specified. Additionally, there are frontend configuration options for specifying the main page URL and allowed origins for CORS. Overall, these properties enable integration with multiple authentication providers and provide flexibility in handling user authentication. Warning All properties in application-web.properties profile must be filled in case of connecting some frontend application. If you don't need to connect any frontend application, you can ignore this file. Info Sample frontend application is available at LPVS repository and can be used as a reference. Command line options All missing properties from application profiles can be specified via command line options. For example: java -jar -Dgithub.token = <my-token> -Dgithub.secret = <my-secret> lpvs-*.jar But there are several options that are not supported by this method and only must be set for the one-time scans in command line mode. The following command line options are available: --build.html.report : This setting specifies the path to the HTML report file which will be generated after the scan. If it is not specified, no HTML report will be generated and result of the scan will be displayed in the console. --github.pull.request : This setting specifies the pull request URL which should be scanned by the LPVS application. --local.path : This setting specifies the path to the local file or folder which should be scanned by the LPVS application. Warning Options --github.pull.request and --local.path can't be use simultaneously. If both options are specified, LPVS application will throw an exception and exit with error code. Environment variables Alternatively, you can provide the necessary values for several properties using the following environment variables: LPVS_GITHUB_LOGIN : Equivalent to the property github.login . LPVS_GITHUB_TOKEN : Equivalent to the property github.token . LPVS_GITHUB_API_URL : Equivalent to the property github.api.url . LPVS_GITHUB_SECRET : Equivalent to the property github.secret . LPVS_LICENSE_CONFLICT : Equivalent to the property license_conflict .","title":"Configuration options"},{"location":"user-guide/config/options/#configuration-options","text":"Description of the meaningful properties and its possible values.","title":"Configuration options"},{"location":"user-guide/config/options/#properties-in-the-application-profile-files","text":"There are three profiles available in the LPVS application: application.properties : default profile which contains all main properties of the application application-singlescan.properties : profile for single scan mode application-web.properties : profile for connecting the frontend application to the backend","title":"Properties in the application profile files"},{"location":"user-guide/config/options/#applicationproperties-profile","text":"debug : This setting determines whether the application runs in debug mode. If set to false, the application will run in normal execution mode. Default: false . server.port : This setting specifies the port number used by the application. Default: 7896 . scanner : This setting specifies the name of the scanning tool being used. Currently supporting ScanOSS . Default: scanoss . license_conflict : This setting specifies where the license conflict information comes from. It can be either db (from the manually filled table in database, refer to the Database guide ) or scanner (if supported by scanner). Default: db . license_source : This setting specifies the URL of the external OSORI license database. Default: https://olis.or.kr:8082 . spring.profiles.active : This setting specifies which Spring profile is active. github.* : These settings include various configurations related to GitHub such as login, token, API URL. Fill in your own values for these settings. Please refer to the Personal token creation guide for more details. github.secret : This setting specifies the secret string used for configuring webhooks. Please refer to the Webhook configuration guide for more details. Default: LPVS . lpvs.* : These settings include various configurations specific to the LPVS application like core pool size, number of scan attempts, and version. spring.jpa.properties.hibernate.default_schema : This setting specifies the default schema name that Hibernate should use. Default: lpvs . spring.datasource.* : These settings specify the data source configurations including URL, username, password, etc. Fill in your own values for these settings.","title":"application.properties profile"},{"location":"user-guide/config/options/#application-singlescanproperties-profile","text":"spring.sql.init.data-locations : This setting specifies the location of the SQL script files that will be executed when initializing the database. By default, it is set to classpath*:database_dump.sql , indicating that the default dump file named database_dump.sql should be found in any package within the classpath. spring.datasource.username : This setting specifies the username for accessing the datasource. By default, it is left blank, indicating that no username is required for authentication. spring.datasource.password : This setting specifies the password for accessing the datasource. Again, it is left blank here, indicating that no password is needed for authentication.","title":"application-singlescan.properties profile"},{"location":"user-guide/config/options/#application-webproperties-profile","text":"These properties configure OAuth2 clients for different providers such as Google, Naver, and Kakao. For each provider, client ID, client secret, redirect URI, authorization grant type, scope, and other relevant details should be specified. Additionally, there are frontend configuration options for specifying the main page URL and allowed origins for CORS. Overall, these properties enable integration with multiple authentication providers and provide flexibility in handling user authentication. Warning All properties in application-web.properties profile must be filled in case of connecting some frontend application. If you don't need to connect any frontend application, you can ignore this file. Info Sample frontend application is available at LPVS repository and can be used as a reference.","title":"application-web.properties profile"},{"location":"user-guide/config/options/#command-line-options","text":"All missing properties from application profiles can be specified via command line options. For example: java -jar -Dgithub.token = <my-token> -Dgithub.secret = <my-secret> lpvs-*.jar But there are several options that are not supported by this method and only must be set for the one-time scans in command line mode. The following command line options are available: --build.html.report : This setting specifies the path to the HTML report file which will be generated after the scan. If it is not specified, no HTML report will be generated and result of the scan will be displayed in the console. --github.pull.request : This setting specifies the pull request URL which should be scanned by the LPVS application. --local.path : This setting specifies the path to the local file or folder which should be scanned by the LPVS application. Warning Options --github.pull.request and --local.path can't be use simultaneously. If both options are specified, LPVS application will throw an exception and exit with error code.","title":"Command line options"},{"location":"user-guide/config/options/#environment-variables","text":"Alternatively, you can provide the necessary values for several properties using the following environment variables: LPVS_GITHUB_LOGIN : Equivalent to the property github.login . LPVS_GITHUB_TOKEN : Equivalent to the property github.token . LPVS_GITHUB_API_URL : Equivalent to the property github.api.url . LPVS_GITHUB_SECRET : Equivalent to the property github.secret . LPVS_LICENSE_CONFLICT : Equivalent to the property license_conflict .","title":"Environment variables"},{"location":"user-guide/service/build-and-run/","text":"Build and run service from the source code Basic steps to build and run LPVS. To build and run the LPVS application you have to follow the next steps: Fill in the properties file according to the selected profile with your own data. Refer to the guideline . Note Alternatively, you can provide the necessary values using the environment variables , or using command line options . Build the LPVS application using Maven . mvn clean install Navigate to the target directory. cd target/ Run the LPVS service using the following command: java -jar lpvs-*.jar LPVS is now built and running. You can create a new pull request or update an existing one with commits, and LPVS will automatically start scanning and provide comments about the licenses found in the project. Warning Make sure that you configured GitHub webhooks according to the guideline .","title":"Build and run service"},{"location":"user-guide/service/build-and-run/#build-and-run-service-from-the-source-code","text":"Basic steps to build and run LPVS. To build and run the LPVS application you have to follow the next steps: Fill in the properties file according to the selected profile with your own data. Refer to the guideline . Note Alternatively, you can provide the necessary values using the environment variables , or using command line options . Build the LPVS application using Maven . mvn clean install Navigate to the target directory. cd target/ Run the LPVS service using the following command: java -jar lpvs-*.jar LPVS is now built and running. You can create a new pull request or update an existing one with commits, and LPVS will automatically start scanning and provide comments about the licenses found in the project. Warning Make sure that you configured GitHub webhooks according to the guideline .","title":"Build and run service from the source code"},{"location":"user-guide/service/database/","text":"Database configuration How to install and configure the LPVS database. Installation Install MySQL server locally using the command: sudo apt install mysql-server Configuration Start the MySQL server: sudo service mysql start Open the MySQL command line interface: sudo mysql Run the following commands in the MySQL command line interface to create the necessary database and user. Note Replace username and password with your preferred values. However, in the example below, they are kept as placeholders for the sake of clarity. create database lpvs ; create user username ; grant all on lpvs . * to username ; alter user username identified by 'password' ; exit ; ( Optional ) If using the provided dump file, make sure to run the following command from the repository's base folder. If using a different dump file, specify its path in the command. After running the command, you will be prompted to enter the password set in the previous step: mysql -u [ username ] -p < /src/main/resources/database_dump.sql ( Optional ) Fill in the lpvs_license_list and lpvs_license_conflicts tables according to the Database customization guideline . Update the properties related to the database operation in the profile file according to the guideline .","title":"Database configuration"},{"location":"user-guide/service/database/#database-configuration","text":"How to install and configure the LPVS database.","title":"Database configuration"},{"location":"user-guide/service/database/#installation","text":"Install MySQL server locally using the command: sudo apt install mysql-server","title":"Installation"},{"location":"user-guide/service/database/#configuration","text":"Start the MySQL server: sudo service mysql start Open the MySQL command line interface: sudo mysql Run the following commands in the MySQL command line interface to create the necessary database and user. Note Replace username and password with your preferred values. However, in the example below, they are kept as placeholders for the sake of clarity. create database lpvs ; create user username ; grant all on lpvs . * to username ; alter user username identified by 'password' ; exit ; ( Optional ) If using the provided dump file, make sure to run the following command from the repository's base folder. If using a different dump file, specify its path in the command. After running the command, you will be prompted to enter the password set in the previous step: mysql -u [ username ] -p < /src/main/resources/database_dump.sql ( Optional ) Fill in the lpvs_license_list and lpvs_license_conflicts tables according to the Database customization guideline . Update the properties related to the database operation in the profile file according to the guideline .","title":"Configuration"},{"location":"user-guide/service/docker/","text":"Run service using pre-built Docker image How to download and run pre-built LPVS Docker images without building the LPVS project. Setting up LPVS Docker environment variables For the Docker deployment scenario, you may need to fill in the environment variables in the docker-compose.yml file. Open docker-compose.yml file. In the environment part of the lpvs service, find ## Github data for fetching code and fill in the GitHub login and personal token that was generated earlier . - github.login=<github-login> - github.token=<personal-token> In case you plan to use a database user other than root reflect this in the appropriate lines in the ## Database Configuration part of the lpvs service in environment section. - spring.datasource.username=user - spring.datasource.password=password Make the following changes in the environment section of mysqldb service near MYSQL_ROOT_PASSWORD value: - MYSQL_USER : user - MYSQL_PASSWORD : password Note If you are using only the root user, make the following change: - spring.datasource.username=root - spring.datasource.password=rootpassword ... - MYSQL_ROOT_PASSWORD : rootpassword Warning In both cases, ensure that the MYSQL_ROOT_PASSWORD field is filled. You can also change the directory for storing MySQL data by modifying the following line: - ./mysql-lpvs-data:/var/lib/mysql Info Database storage by default is a directory in the root of the repository with the name mysql-lpvs-data . Running and stopping LPVS and MySQL Docker images Start the LPVS services using docker compose : docker compose up -d Stop the LPVS services using docker compose : docker compose down You can now create a new pull request or update an existing one with commits. If webhook was configured correctly, LPVS will automatically start scanning and provide comments about the licenses and conflicts found in the project.","title":"Run service using pre-built Docker image"},{"location":"user-guide/service/docker/#run-service-using-pre-built-docker-image","text":"How to download and run pre-built LPVS Docker images without building the LPVS project.","title":"Run service using pre-built Docker image"},{"location":"user-guide/service/docker/#setting-up-lpvs-docker-environment-variables","text":"For the Docker deployment scenario, you may need to fill in the environment variables in the docker-compose.yml file. Open docker-compose.yml file. In the environment part of the lpvs service, find ## Github data for fetching code and fill in the GitHub login and personal token that was generated earlier . - github.login=<github-login> - github.token=<personal-token> In case you plan to use a database user other than root reflect this in the appropriate lines in the ## Database Configuration part of the lpvs service in environment section. - spring.datasource.username=user - spring.datasource.password=password Make the following changes in the environment section of mysqldb service near MYSQL_ROOT_PASSWORD value: - MYSQL_USER : user - MYSQL_PASSWORD : password Note If you are using only the root user, make the following change: - spring.datasource.username=root - spring.datasource.password=rootpassword ... - MYSQL_ROOT_PASSWORD : rootpassword Warning In both cases, ensure that the MYSQL_ROOT_PASSWORD field is filled. You can also change the directory for storing MySQL data by modifying the following line: - ./mysql-lpvs-data:/var/lib/mysql Info Database storage by default is a directory in the root of the repository with the name mysql-lpvs-data .","title":"Setting up LPVS Docker environment variables"},{"location":"user-guide/service/docker/#running-and-stopping-lpvs-and-mysql-docker-images","text":"Start the LPVS services using docker compose : docker compose up -d Stop the LPVS services using docker compose : docker compose down You can now create a new pull request or update an existing one with commits. If webhook was configured correctly, LPVS will automatically start scanning and provide comments about the licenses and conflicts found in the project.","title":"Running and stopping LPVS and MySQL Docker images"},{"location":"user-guide/service/scanner/","text":"Scanner installation How to install scan engine ScanOSS. The ScanOSS Python package provides a simple easy to consume library for interacting with ScanOSS APIs/Engine. To install ScanOSS and dependencies, use the command: pip3 install --require-hashes -r requirements.txt Info File requirements.txt could be found at the root folder of the LPVS repository. Make sure that the PATH variable is added to the environment: export PATH = \" $HOME /.local/bin: $PATH \" For more details, please refer to the official guideline . Warning If installing on Ubuntu 2023.04, Fedora 38, Debian 11, etc. a few additional steps are required before installing ScanOSS. More details can be found here .","title":"Scanner installation"},{"location":"user-guide/service/scanner/#scanner-installation","text":"How to install scan engine ScanOSS. The ScanOSS Python package provides a simple easy to consume library for interacting with ScanOSS APIs/Engine. To install ScanOSS and dependencies, use the command: pip3 install --require-hashes -r requirements.txt Info File requirements.txt could be found at the root folder of the LPVS repository. Make sure that the PATH variable is added to the environment: export PATH = \" $HOME /.local/bin: $PATH \" For more details, please refer to the official guideline . Warning If installing on Ubuntu 2023.04, Fedora 38, Debian 11, etc. a few additional steps are required before installing ScanOSS. More details can be found here .","title":"Scanner installation"},{"location":"user-guide/service/webhook/","text":"GitHub webhook configuration How to configure GitHub project for interaction with LPVS. To enable LPVS license scanning for your project, you need to set up GitHub Webhooks: Create a personal GitHub access token Follow the instructions here to create a personal access token ( personal-token ) with the necessary permissions. Warning Pay attention that the token must be copied immediately after creation, because you will not be able to see it later! (Optional) Configure Ngrok reverse proxy To configure GitHub access to a personal server, you need to expose the URL to an external API. If the server has a dedicated IP address or domain, this step can be omitted. Install Ngrok and connect your account from Ngrok guide (follow steps 1 and 2). If Ngrok is included in the docker compose file, auth-token can be found on Ngrok portal . Run Ngrok using the command: ngrok http 7896 Configure the webhook in your GitHub repository settings Follow the next steps: Go to Settings -> Webhooks . Click on Add webhook . Fill in the Payload URL with URL where LPVS is running. Note If you're using Ngrok, the Payload URL can be found on localhost: http://127.0.0.1:4040/ . It will look like https://50be-62-205-136-206.ngrok-free.app/ . Specify the content type as application/json . Fill in the Secret field with the passphrase: LPVS . Save the same passphrase in github.secret of the LPVS backend application.properties or docker-compose.yml files. Select Let me select individual events -> Pull requests (make sure only Pull requests is selected). Set the webhook to Active . Click Add Webhook . Configuration from your project side is now completed.","title":"GitHub webhook configuration"},{"location":"user-guide/service/webhook/#github-webhook-configuration","text":"How to configure GitHub project for interaction with LPVS. To enable LPVS license scanning for your project, you need to set up GitHub Webhooks:","title":"GitHub webhook configuration"},{"location":"user-guide/service/webhook/#create-a-personal-github-access-token","text":"Follow the instructions here to create a personal access token ( personal-token ) with the necessary permissions. Warning Pay attention that the token must be copied immediately after creation, because you will not be able to see it later!","title":"Create a personal GitHub access token"},{"location":"user-guide/service/webhook/#optional-configure-ngrok-reverse-proxy","text":"To configure GitHub access to a personal server, you need to expose the URL to an external API. If the server has a dedicated IP address or domain, this step can be omitted. Install Ngrok and connect your account from Ngrok guide (follow steps 1 and 2). If Ngrok is included in the docker compose file, auth-token can be found on Ngrok portal . Run Ngrok using the command: ngrok http 7896","title":"(Optional) Configure Ngrok reverse proxy"},{"location":"user-guide/service/webhook/#configure-the-webhook-in-your-github-repository-settings","text":"Follow the next steps: Go to Settings -> Webhooks . Click on Add webhook . Fill in the Payload URL with URL where LPVS is running. Note If you're using Ngrok, the Payload URL can be found on localhost: http://127.0.0.1:4040/ . It will look like https://50be-62-205-136-206.ngrok-free.app/ . Specify the content type as application/json . Fill in the Secret field with the passphrase: LPVS . Save the same passphrase in github.secret of the LPVS backend application.properties or docker-compose.yml files. Select Let me select individual events -> Pull requests (make sure only Pull requests is selected). Set the webhook to Active . Click Add Webhook . Configuration from your project side is now completed.","title":"Configure the webhook in your GitHub repository settings"}]}